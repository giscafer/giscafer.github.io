<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Giscafer&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.giscafer.com/"/>
  <updated>2019-04-23T15:56:44.473Z</updated>
  <id>http://blog.giscafer.com/</id>
  
  <author>
    <name>giscafer</name>
    <email>giscafer@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客停更说明</title>
    <link href="http://blog.giscafer.com/2019/04/23/website-migration/"/>
    <id>http://blog.giscafer.com/2019/04/23/website-migration/</id>
    <published>2019-04-23T15:45:00.000Z</published>
    <updated>2019-04-23T15:56:44.473Z</updated>
    
    <content type="html"><![CDATA[<p>由于更新和维护不方便，本博客暂停维护了，平时学习总结的文章会以 <code>github issues</code> 的方式记录或者在 <code>微信公众号</code> 分享，感兴趣的朋友欢迎关注，并参与学习交流。</p>
<h3 id="front-end-manual"><a href="#front-end-manual" class="headerlink" title="front-end-manual"></a>front-end-manual</h3><p>欢迎 watch 和 star : <a href="https://github.com/giscafer/front-end-manual/issues" target="_blank" rel="external">front-end-manual/issues</a></p>
<h3 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h3><p><img src="http://blog.giscafer.com/static/images/qrcode_giscafer.jpg" alt="扫码关注"></p>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p>写代码，交朋友：<a href="https://github.com/giscafer" target="_blank" rel="external">@giscafer</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于更新和维护不方便，本博客暂停维护了，平时学习总结的文章会以 &lt;code&gt;github issues&lt;/code&gt; 的方式记录或者在 &lt;code&gt;微信公众号&lt;/code&gt; 分享，感兴趣的朋友欢迎关注，并参与学习交流。&lt;/p&gt;
&lt;h3 id=&quot;front-end-manua
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网站运营" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%AB%99%E8%BF%90%E8%90%A5/"/>
    
    
      <category term="博客" scheme="http://blog.giscafer.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>使用 ViewContainerRef 探索Angular DOM操作</title>
    <link href="http://blog.giscafer.com/2017/10/21/exploring-angular-dom-abstractions/"/>
    <id>http://blog.giscafer.com/2017/10/21/exploring-angular-dom-abstractions/</id>
    <published>2017-10-21T03:40:44.000Z</published>
    <updated>2017-10-21T03:43:45.459Z</updated>
    
    <content type="html"><![CDATA[<p>Source From:<br><a href="https://blog.angularindepth.com/exploring-angular-dom-abstractions-80b3ebcfc02" target="_blank" rel="external">Exploring Angular DOM manipulation techniques using ViewContainerRef</a></p>
<p><em>翻译：giscafer<br>说明：根据个人理解翻译，不完全词词对应。</em></p>
<p>每当我读到关于使用Angular DOM的操作时，我总是会看到其中的一个或几个类: <code>ElementRef</code>, <code>TemplateRef</code>, <code>ViewContainerRef</code>等。遗憾的是，尽管Angular文档或相关文章当中提到这三者的一些内容，但我还没有发现关于这三者如何协作的完整的理想模型和示例的描述。本文旨在描述这种模型。</p>
<p>如果你学习过<code>angular.js</code>的话，你就会知道在<code>angular.js</code>中很容易去操作DOM。Angular注入DOM <code>element</code> 到 <code>link</code> 函数中，你可以查询组件模板内的任何节点，添加或删除子节点，修改样式等等。然而，这种方法有一个主要缺点——它被紧紧绑定到一个浏览器平台上（意思是脱离浏览器就不能玩了）。</p>
<p>新的 Angular 版本运行在不同的平台上——在浏览器上，在移动平台上，或者在 web worker 中。因此，需要在平台特定API 和框架接口之间进行抽象级别的抽象。从 Angular 来看，这些抽象的形式有以下的参考类型: <code>ElementRef</code>,  <code>TemplateRef</code>,  <code>ViewRef</code>,  <code>ComponentRef</code>  和  <code>ViewContainerRef</code>。在本文中，我们将详细介绍每个引用类型，并展示如何使用它们来操作DOM。</p>
<a id="more"></a>
<h2 id="ViewChild"><a href="#ViewChild" class="headerlink" title="@ViewChild"></a>@ViewChild</h2><p>在探索DOM抽象之前，让我们了解一下如何在组件/指令类( component/directive class)中访问这些抽象。Angular 提供了一个称为DOM查询的机制。它以 <code>@ViewChild</code> 和 <code>@ViewChildren</code>  装饰器的形式出现。它们的行为相同，只有前者返回一个引用，而后者返回多个引用作为 <a href="https://angular.io/api/core/QueryList" target="_blank" rel="external">QueryList</a> 对象。在本文中的例子中，我将主要使用 <code>ViewChild</code> 装饰器，而不会在它之前使用@符号。</p>
<p>通常，这些装饰器与<a href="https://angular.io/guide/template-syntax#!#ref-vars" target="_blank" rel="external">模板引用变量</a>一起工作。<strong>模板引用变量(template reference variable)</strong> 仅仅是模板中的DOM元素的命名引用。您可以将其视为与 <code>html</code> 元素的id属性类似的东西。使用模板引用标记DOM元素，然后使用 <code>ViewChild</code> 装饰器 在类中查询它。这里有一个基本的例子:</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">    selector: <span class="string">'sample'</span>,</div><div class="line">    template: <span class="string">`</span></div><div class="line">        &lt;span #tref&gt;I am span&lt;/span&gt;</div><div class="line">    `</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> SampleComponent <span class="keyword">implements</span> AfterViewInit &#123;</div><div class="line">    <span class="meta">@ViewChild</span>(<span class="string">"tref"</span>, &#123;read: ElementRef&#125;) tref: ElementRef;</div><div class="line"></div><div class="line">    ngAfterViewInit(): <span class="built_in">void</span> &#123;</div><div class="line">        <span class="comment">// outputs `I am span`</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.tref.nativeElement.textContent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ViewChild decorator 的基本语法如下:</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ViewChild</span>([reference from template], &#123;read: [reference <span class="keyword">type</span>]&#125;);</div></pre></td></tr></table></figure>
<p>在这个示例中，您可以看到，我将 <code>tref</code> 指定为 <code>html</code> 中的模板引用名称，并接收与此元素关联的<br> <code>ElementRef</code> 。第二个参数 <code>read</code> 并不总是必需的，因为 Angular 可以通过DOM元素的类型推断引用类型。例如，如果它是一个简单的 <code>html</code> 元素，比如 <code>span</code>，Angular 返回 <code>ElementRef</code>。如果它是一个 <code>template</code> 模板，它将返回 <code>TemplateRef</code> 。一些引用，如 <code>ViewContainerRef</code> 不能被推断，并且必须在<br> <code>read</code> 参数中被声明。其他的，如 <code>ViewRef</code> 不能从 DOM 接收返回，必须手动构造。</p>
<p>好了，现在我们知道了如何查询引用，让我们开始探索它们。</p>
<h2 id="ElementRef"><a href="#ElementRef" class="headerlink" title="ElementRef"></a>ElementRef</h2><p>这是最基本的抽象概念。如果您观察<a href="https://github.com/angular/angular/blob/4.4.4/packages/core/src/linker/element_ref.ts#L1-L48" target="_blank" rel="external">它的类结构</a>，您将看到它只包含与之关联的原生元素（native element）。它对于访问原生DOM元素非常有用，正如我们在这里看到的:</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// outputs `I am span`</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.tref.nativeElement.textContent);</div></pre></td></tr></table></figure>
<p>然而，这种用法却被 Angular 团队 所劝阻。它不仅会带来<a href="https://angular.io/api/core/ElementRef" target="_blank" rel="external">安全风险</a>，而且还会在应用程序和呈现层之间产生紧密耦合，使得在多个平台上运行应用程序变得困难。我认为，它不是访问 <code>nativeElement</code> 来打破抽象，而是使用特定的DOM API，比如 <code>textContent</code> 。但是，稍后您将看到，在 Angular 上实现的DOM操作思想模型几乎不需要这样一个较低级别的访问。</p>
<p><code>ElementRef</code> 可以通过使用 ViewChild decorator作为任何 DOM元素被返回 。但是由于所有组件都驻留在一个自定义DOM元素中，并且所有的指令都被应用于DOM元素，组件和指令类可以通过DI机制（依赖注入机制）获得与它们的宿主元素（host element）相关联的元素的实例:</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">    selector: <span class="string">'sample'</span>,</div><div class="line">    ...</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> SampleComponent&#123;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> hostElement: ElementRef</span>) &#123;</div><div class="line">        <span class="comment">//outputs &lt;sample&gt;...&lt;/sample&gt;</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.hostElement.nativeElement.outerHTML);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>因此，虽然组件可以通过DI访问它的宿主元素，但 ViewChild decorator 通常会在其视图(模板)（view (template)）中获得对DOM元素的引用。指令的副作用——他们没有任何视图模板（views），他们通常直接与他们所依附的元素一起工作。</p>
<h2 id="TemplateRef"><a href="#TemplateRef" class="headerlink" title="TemplateRef"></a>TemplateRef</h2><p>对于大多数web开发人员来说，模板的概念应该是熟悉的。模板是一组DOM元素，在应用程序的视图中可以重用。在HTML5标准引入模板标签<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template" target="_blank" rel="external">template</a>之前，大多数模板都是在一个带有一些 <code>type</code> 属性变化的脚本标记的浏览器中完成的:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script id="tpl" type="text/template"&gt;</div><div class="line">  &lt;span&gt;I am span in template&lt;/span&gt;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>这种方法当然有许多缺点，比如语义和手动去创建DOM模型的必要性。使用模板标签 <code>template</code> 浏览器解析 <code>html</code> 并创建 <code>DOM</code> 树，但不会渲染它。然后可以通过 <code>content</code> 属性访问它:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    let tpl = document.querySelector('#tpl');</div><div class="line">    let container = document.querySelector('.insert-after-me');</div><div class="line">    insertAfter(container, tpl.content);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;div class="insert-after-me"&gt;&lt;/div&gt;</div><div class="line">&lt;template id="tpl"&gt;</div><div class="line">    &lt;span&gt;I am span in template&lt;/span&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<p>Angular 拥抱HTML5的这种方法并实现 <code>TemplateRef</code> 类以变更好的操作使用模板。下面是如何使用它:</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">    selector: <span class="string">'sample'</span>,</div><div class="line">    template: <span class="string">`</span></div><div class="line">        &lt;ng-template #tpl&gt;</div><div class="line">            &lt;span&gt;I am span in template&lt;/span&gt;</div><div class="line">        &lt;/ng-template&gt;</div><div class="line">    `</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> SampleComponent <span class="keyword">implements</span> AfterViewInit &#123;</div><div class="line">    <span class="meta">@ViewChild</span>(<span class="string">"tpl"</span>) tpl: TemplateRef&lt;<span class="built_in">any</span>&gt;;</div><div class="line"></div><div class="line">    ngAfterViewInit() &#123;</div><div class="line">        <span class="keyword">let</span> elementRef = <span class="keyword">this</span>.tpl.elementRef;</div><div class="line">        <span class="comment">// outputs `template bindings=&#123;&#125;`</span></div><div class="line">        <span class="built_in">console</span>.log(elementRef.nativeElement.textContent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>框架从DOM中删除模板元素，并在其位置插入注释。这就是呈现时的样子:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">sample</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--template bindings=&#123;&#125;--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">sample</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过它本身， <code>TemplateRef</code> 类是一个简单的类。它在 <code>elementRef</code> 属性中引用它的宿主元素，并有一个<code>createEmbeddedView</code> 方法。但是，这个方法非常有用，因为它允许我们创建一个视图并返回一个引用作为 <code>ViewRef</code>。</p>
<h2 id="ViewRef"><a href="#ViewRef" class="headerlink" title="ViewRef"></a>ViewRef</h2><p><code>ViewRef</code> 表示一个Angular 视图。在 Angular 框架中，视图（View）是应用程序UI的基本构件。它是构成和毁灭在一起的最小元素组合。Angular 鼓励开发人员将UI看作是视图的组成，而不是独立的html标记树。</p>
<p>Angular 支持两种视图:</p>
<ul>
<li>Embedded Views which are linked to a Template （连接到模板的嵌入视图）</li>
<li>Host Views which are linked to a Component (连接到组件的宿主视图)</li>
</ul>
<h3 id="Creating-embedded-view-（创建嵌入视图）"><a href="#Creating-embedded-view-（创建嵌入视图）" class="headerlink" title="Creating embedded view （创建嵌入视图）"></a>Creating embedded view （创建嵌入视图）</h3><p>模板仅包含视图的蓝图。可以使用前面提到的 <code>createEmbeddedView</code> 方法从模板中实例化一个视图:</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ngAfterViewInit() &#123;</div><div class="line">    <span class="keyword">let</span> view = <span class="keyword">this</span>.tpl.createEmbeddedView(<span class="literal">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Creating-host-view（创建宿主视图）"><a href="#Creating-host-view（创建宿主视图）" class="headerlink" title="Creating host view（创建宿主视图）"></a>Creating host view（创建宿主视图）</h3><p>当组件被动态实例化时，会创建宿主视图。使用 <code>ComponentFactoryResolver</code> 可以动态地创建一个组件:</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> injector: Injector,</span></div><div class="line">            <span class="keyword">private</span> r: ComponentFactoryResolver) &#123;</div><div class="line">    <span class="keyword">let</span> factory = <span class="keyword">this</span>.r.resolveComponentFactory(ColorComponent);</div><div class="line">    <span class="keyword">let</span> componentRef = factory.create(injector);</div><div class="line">    <span class="keyword">let</span> view = componentRef.hostView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 Angular 中，每个组件都被绑定到一个注入器（injector）的特定实例，因此我们在创建组件时传递当前的注入器实例。另外，不要忘记必须将动态实例化的组件添加到模块或托管组件的 <code>EntryComponents</code><br> 中。</p>
<p>因此，我们已经看到了如何创建嵌入式视图和宿主视图。一旦创建了视图，就可以使用 <code>ViewContainer</code><br> 将其插入到DOM中。下一节将探讨其功能。</p>
<h2 id="ViewContainerRef"><a href="#ViewContainerRef" class="headerlink" title="ViewContainerRef"></a>ViewContainerRef</h2><p>表示一个容器，其中可以附加一个或多个视图。</p>
<p>这里要提到的第一件事是，任何DOM元素都可以用作视图容器。有趣的是，Angular 在元素内部没有插入视图，而是在元素绑定到 <code>ViewContainer</code> 之后附加它们。这类似于 <code>router-outlet</code> 插入组件。</p>
<p>通常，一个好的候选对象可以标记一个 <code>ViewContainer</code> 应该被创建的位置，它是 <code>ng-container</code> 元素。它是作为一个注释呈现的，因此它不会向DOM引入冗余的html元素。下面是一个 <code>ViewContainer</code> 的示例：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">    selector: <span class="string">'sample'</span>,</div><div class="line">    template: <span class="string">`</span></div><div class="line">        &lt;span&gt;I am first span&lt;/span&gt;</div><div class="line">        &lt;ng-container #vc&gt;&lt;/ng-container&gt;</div><div class="line">        &lt;span&gt;I am last span&lt;/span&gt;</div><div class="line">    `</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> SampleComponent <span class="keyword">implements</span> AfterViewInit &#123;</div><div class="line">    <span class="meta">@ViewChild</span>(<span class="string">"vc"</span>, &#123;read: ViewContainerRef&#125;) vc: ViewContainerRef;</div><div class="line"></div><div class="line">    ngAfterViewInit(): <span class="built_in">void</span> &#123;</div><div class="line">        <span class="comment">// outputs `template bindings=&#123;&#125;`</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.vc.element.nativeElement.textContent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正如其他DOM抽象一样， <code>ViewContainer</code> 被绑定到通过 <code>element</code> 属性访问的特定DOM元素。在这个例子中，它绑定到 <code>ng-container</code> 元素作为注释，因此输出是 <code>template bindings={}</code> 。</p>
<h3 id="Manipulating-views-（操作视图）"><a href="#Manipulating-views-（操作视图）" class="headerlink" title="Manipulating views （操作视图）"></a>Manipulating views （操作视图）</h3><p><code>ViewContainer</code> 为操作视图提供了一个方便的API:</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> ViewContainerRef &#123;</div><div class="line">    ...</div><div class="line">    clear() : <span class="built_in">void</span></div><div class="line">    insert(viewRef: ViewRef, index?: <span class="built_in">number</span>) : ViewRef</div><div class="line">    <span class="keyword">get</span>(index: <span class="built_in">number</span>) : ViewRef</div><div class="line">    indexOf(viewRef: ViewRef) : <span class="built_in">number</span></div><div class="line">    detach(index?: <span class="built_in">number</span>) : ViewRef</div><div class="line">    move(viewRef: ViewRef, currentIndex: <span class="built_in">number</span>) : ViewRef</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们前面已经看到了如何从模板和组件手动创建两种视图。一旦我们有了视图，我们就可以使用insert方法将它 <code>insert</code> 到DOM中。因此，这里有一个示例，从模板创建一个嵌入式视图，并将其插入由 <code>ng - container</code> 元素标记的特定位置 :</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">    selector: <span class="string">'sample'</span>,</div><div class="line">    template: <span class="string">`</span></div><div class="line">        &lt;span&gt;I am first span&lt;/span&gt;</div><div class="line">        &lt;ng-container #vc&gt;&lt;/ng-container&gt;</div><div class="line">        &lt;span&gt;I am last span&lt;/span&gt;</div><div class="line">        &lt;template #tpl&gt;</div><div class="line">            &lt;span&gt;I am span in template&lt;/span&gt;</div><div class="line">        &lt;/template&gt;</div><div class="line">    `</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> SampleComponent <span class="keyword">implements</span> AfterViewInit &#123;</div><div class="line">    <span class="meta">@ViewChild</span>(<span class="string">"vc"</span>, &#123;read: ViewContainerRef&#125;) vc: ViewContainerRef;</div><div class="line">    <span class="meta">@ViewChild</span>(<span class="string">"tpl"</span>) tpl: TemplateRef&lt;<span class="built_in">any</span>&gt;;</div><div class="line"></div><div class="line">    ngAfterViewInit() &#123;</div><div class="line">        <span class="keyword">let</span> view = <span class="keyword">this</span>.tpl.createEmbeddedView(<span class="literal">null</span>);</div><div class="line">        <span class="keyword">this</span>.vc.insert(view);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有了这个实现，生成的html就像这样:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">sample</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>I am first span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--template bindings=&#123;&#125;--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>I am span in template<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>I am last span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--template bindings=&#123;&#125;--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">sample</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>为了从DOM中删除一个视图，我们可以使用 <code>detach</code>方法。所有其他方法都是自解释性的，可用于获取索引视图的引用，将视图移到另一个位置，或者从容器中删除所有视图。</p>
<h3 id="Creating-Views-创建视图"><a href="#Creating-Views-创建视图" class="headerlink" title="Creating Views (创建视图)"></a>Creating Views (创建视图)</h3><p><code>ViewContainer</code> 还提供了自动创建视图的API:</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> ViewContainerRef &#123;</div><div class="line">    element: ElementRef</div><div class="line">    length: <span class="built_in">number</span></div><div class="line"></div><div class="line">    createComponent(componentFactory...): ComponentRef&lt;C&gt;</div><div class="line">    createEmbeddedView(templateRef...): EmbeddedViewRef&lt;C&gt;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些都是我们在上面手工完成的简单方便的包装。它们从模板或组件创建视图，并将其插入指定的位置。</p>
<h2 id="ngTemplateOutlet-和-ngComponentOutlet"><a href="#ngTemplateOutlet-和-ngComponentOutlet" class="headerlink" title="ngTemplateOutlet 和 ngComponentOutlet"></a>ngTemplateOutlet 和 ngComponentOutlet</h2><p>虽然知道底层机制是如何工作的总是很好，但通常都希望有某种快捷方式。此快捷方式以两种指令形式出现: <code>ngTemplateOutlet</code> 和 <code>ngComponentOutlet</code> 。在撰写本文时，两者都是实验性的，<code>ngComponentOutlet</code> 将在版本4中可用（angular4+已可以随意使用）。但如果你已经读过上面所有的内容，就很容易理解它们的作用。</p>
<h3 id="ngTemplateOutlet"><a href="#ngTemplateOutlet" class="headerlink" title="ngTemplateOutlet"></a>ngTemplateOutlet</h3><p>它将DOM元素标记为 <code>ViewContainer</code> ，并在其中插入一个由模板创建的嵌入视图，而不需要在组件类中显式地这样做。这意味着上面的例子中我们创建了一个视图并将其插入<code>#vc</code> DOM元素，可以这样重写:</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">    selector: <span class="string">'sample'</span>,</div><div class="line">    template: <span class="string">`</span></div><div class="line">        &lt;span&gt;I am first span&lt;/span&gt;</div><div class="line">        &lt;ng-container [ngTemplateOutlet]="tpl"&gt;&lt;/ng-container&gt;</div><div class="line">        &lt;span&gt;I am last span&lt;/span&gt;</div><div class="line">        &lt;template #tpl&gt;</div><div class="line">            &lt;span&gt;I am span in template&lt;/span&gt;</div><div class="line">        &lt;/template&gt;</div><div class="line">    `</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> SampleComponent &#123;&#125;</div></pre></td></tr></table></figure>
<p>您可以看到，我们在组件类中不使用任何实例化代码的视图。非常方便。</p>
<h3 id="ngComponentOutlet"><a href="#ngComponentOutlet" class="headerlink" title="ngComponentOutlet"></a>ngComponentOutlet</h3><p>该指令类似于 <code>ngTemplateOutlet</code>，其不同之处在于它创建了一个宿主视图(实例化一个组件)，而不是一个嵌入式视图。你可以这样使用:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngComponentOutlet</span>=<span class="string">"ColorComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现在，所有这些信息似乎都很容易消化，但实际上它是相当连贯的，并在通过视图操作DOM的过程中形成了一个清晰的理想模型。您可以通过使用 <code>ViewChild</code> 查询和模板变量引用来获得 Angular DOM 抽象的引用。围绕DOM元素的最简单的包装是 <code>ElementRef</code> 。对于模板，您有 <code>TemplateRef</code>，它允许您创建一个嵌入式视图。 可以通过使用 <code>ComponentFactoryResolver</code>创建的  <code>componentRef</code> 访问宿主视图。视图可以使用 <code>ViewContainerRef</code> 进行操作。有两种指令使手动过程变为自动化：<code>ngTemplateOutlet</code> ——操作嵌入视图 和 <code>ngComponentOutlet</code>—— 创建宿主视图（动态组件）。</p>
<p>&lt;完&gt;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Source From:&lt;br&gt;&lt;a href=&quot;https://blog.angularindepth.com/exploring-angular-dom-abstractions-80b3ebcfc02&quot;&gt;Exploring Angular DOM manipulation techniques using ViewContainerRef&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;翻译：giscafer&lt;br&gt;说明：根据个人理解翻译，不完全词词对应。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;每当我读到关于使用Angular DOM的操作时，我总是会看到其中的一个或几个类: &lt;code&gt;ElementRef&lt;/code&gt;, &lt;code&gt;TemplateRef&lt;/code&gt;, &lt;code&gt;ViewContainerRef&lt;/code&gt;等。遗憾的是，尽管Angular文档或相关文章当中提到这三者的一些内容，但我还没有发现关于这三者如何协作的完整的理想模型和示例的描述。本文旨在描述这种模型。&lt;/p&gt;
&lt;p&gt;如果你学习过&lt;code&gt;angular.js&lt;/code&gt;的话，你就会知道在&lt;code&gt;angular.js&lt;/code&gt;中很容易去操作DOM。Angular注入DOM &lt;code&gt;element&lt;/code&gt; 到 &lt;code&gt;link&lt;/code&gt; 函数中，你可以查询组件模板内的任何节点，添加或删除子节点，修改样式等等。然而，这种方法有一个主要缺点——它被紧紧绑定到一个浏览器平台上（意思是脱离浏览器就不能玩了）。&lt;/p&gt;
&lt;p&gt;新的 Angular 版本运行在不同的平台上——在浏览器上，在移动平台上，或者在 web worker 中。因此，需要在平台特定API 和框架接口之间进行抽象级别的抽象。从 Angular 来看，这些抽象的形式有以下的参考类型: &lt;code&gt;ElementRef&lt;/code&gt;,  &lt;code&gt;TemplateRef&lt;/code&gt;,  &lt;code&gt;ViewRef&lt;/code&gt;,  &lt;code&gt;ComponentRef&lt;/code&gt;  和  &lt;code&gt;ViewContainerRef&lt;/code&gt;。在本文中，我们将详细介绍每个引用类型，并展示如何使用它们来操作DOM。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Angular" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/Angular/"/>
    
    
      <category term="ViewContainerRef" scheme="http://blog.giscafer.com/tags/ViewContainerRef/"/>
    
  </entry>
  
  <entry>
    <title>GIS520论坛关闭停止运营</title>
    <link href="http://blog.giscafer.com/2017/10/09/gis520-close-site/"/>
    <id>http://blog.giscafer.com/2017/10/09/gis520-close-site/</id>
    <published>2017-10-09T12:13:59.000Z</published>
    <updated>2017-10-09T12:38:39.385Z</updated>
    
    <content type="html"><![CDATA[<p>网站从2013年4月24日运营到2017年10月8日，会员数约4W左右，PV后期并不是很活跃。起初搭建GIS520论坛的初衷是，国内GIS论坛并不活跃，都是冷淡或者放养没人管的；当初是学生，拥有这理想和激情，想通过自己搭建一个论坛，定位为GIS学习交流平台，GIS爱好者联盟，提升业界专业互联网社区活跃度，让广大同学有一个可以更好学习和交流的地方。</p>
<p>然而，理想和现实差距比较大，最后还没能达到自己理想的目标，所以关站是必然的。</p>
<p>最后，尽管GIS520社区没了，有机会我还会通过其他平台，视频或者文章的方式，分享一些自己的经验和技术。最后最后，感谢大家！</p>
<p><img src="./static/img/20171009200748.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网站从2013年4月24日运营到2017年10月8日，会员数约4W左右，PV后期并不是很活跃。起初搭建GIS520论坛的初衷是，国内GIS论坛并不活跃，都是冷淡或者放养没人管的；当初是学生，拥有这理想和激情，想通过自己搭建一个论坛，定位为GIS学习交流平台，GIS爱好者联盟
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网站运营" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%AB%99%E8%BF%90%E8%90%A5/"/>
    
    
      <category term="gis520" scheme="http://blog.giscafer.com/tags/gis520/"/>
    
  </entry>
  
  <entry>
    <title>ionic3之组件封装篇</title>
    <link href="http://blog.giscafer.com/2017/07/05/ionic-custom-component/"/>
    <id>http://blog.giscafer.com/2017/07/05/ionic-custom-component/</id>
    <published>2017-07-05T13:30:04.000Z</published>
    <updated>2017-07-06T15:33:47.509Z</updated>
    
    <content type="html"><![CDATA[<p>ionic3官方提供了较多好用的组件和API。但是有些时候，我们用到的交互方式，官方的组件不是全都满足的。比如类似网易新闻APP，菜单的滑动效果。或者一些和业务接口紧密联系的组件。</p>
<h2 id="滑动菜单效果实现"><a href="#滑动菜单效果实现" class="headerlink" title="滑动菜单效果实现"></a>滑动菜单效果实现</h2><p> 推荐使用插件<a href="https://github.com/zyra/ionic2-super-tabs" target="_blank" rel="external">ionic2-super-tabs</a>，功能强大。下边是<code>slides + slides</code>组合挖坑尝试</p>
<p>最终效果如下：</p>
<p><img src="/static/img/ionic3-custom-component1.gif" alt="slides+slides实现菜单滑动"></p>
<a id="more"></a>
<p>简单的代码如下：（完善的话实际上需要填掉很多坑，这也可能是为什么官方没有提供这类的组件吧）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ion-navbar</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span>slide-tab-demo<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ion-navbar</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">task-slide</span> (<span class="attr">slideClick</span>)=<span class="string">"slideClick($event)"</span> [<span class="attr">slides</span>]=<span class="string">"tabs"</span> [<span class="attr">selectedIndex</span>]=<span class="string">"navSelectedIndex"</span>  [<span class="attr">taskType</span>]=<span class="string">"segment"</span> [<span class="attr">pageNumber</span>]=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">task-slide</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 100%;;background-color:#999"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ion-slides</span> #<span class="attr">slidesRef</span> (<span class="attr">ionSlideDidChange</span>)=<span class="string">"slideChanged($event)"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ion-slide</span> *<span class="attr">ngFor</span>=<span class="string">"let slide of slides; let i = index;"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list has-header"</span> <span class="attr">id</span>=<span class="string">"&#123;&#123;i&#125;&#125;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>&#123;&#123;slide.name&#125;&#125;<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ion-slide</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ion-slides</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>ts代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; Component, ViewChild &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; IonicPage, NavController, NavParams, Slides, Tabs &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</div><div class="line"></div><div class="line">@Component(&#123;</div><div class="line">  <span class="attr">selector</span>: <span class="string">'page-slide-tab-demo'</span>,</div><div class="line">  <span class="attr">templateUrl</span>: <span class="string">'slide-tab-demo.html'</span>,</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">SlideTabDemoPage</span> </span>&#123;</div><div class="line"></div><div class="line">  @ViewChild(<span class="string">"slidesRef"</span>)</div><div class="line">  slidesRef: Slides;</div><div class="line">  @ViewChild(<span class="string">"tabsRef"</span>)</div><div class="line">  tabsRef: Tabs;</div><div class="line"></div><div class="line">  slides: any[] = [];</div><div class="line">  currentTabId = <span class="string">"tab1"</span>;</div><div class="line">  tabs: any[] = [];</div><div class="line">  navSelectedIndex = <span class="number">0</span>;</div><div class="line">  <span class="keyword">constructor</span>(</div><div class="line">    public navCtrl: NavController,</div><div class="line">    public alert: Alert,</div><div class="line">    public navParams: NavParams</div><div class="line">  ) &#123;</div><div class="line">    <span class="keyword">this</span>.slides = [&#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'头条新闻'</span></div><div class="line">    &#125;, &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'娱乐新闻'</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'体育新闻'</span></div><div class="line">    &#125;];</div><div class="line">    <span class="keyword">this</span>.tabs = [&#123;</div><div class="line">      <span class="attr">_name</span>: <span class="string">"头条"</span>,</div><div class="line">      <span class="attr">num</span>: <span class="number">99</span></div><div class="line">    &#125;, &#123;</div><div class="line">      <span class="attr">_name</span>: <span class="string">"娱乐"</span>,</div><div class="line">      <span class="attr">num</span>: <span class="number">0</span></div><div class="line">    &#125;, &#123;</div><div class="line">      <span class="attr">_name</span>: <span class="string">"热点"</span>,</div><div class="line">      <span class="attr">num</span>: <span class="number">0</span></div><div class="line">    &#125;, &#123;</div><div class="line">      <span class="attr">_name</span>: <span class="string">"体育"</span>,</div><div class="line">      <span class="attr">num</span>: <span class="number">4</span></div><div class="line">    &#125;, &#123;</div><div class="line">      <span class="attr">_name</span>: <span class="string">"财经"</span>,</div><div class="line">      <span class="attr">num</span>: <span class="number">0</span></div><div class="line">    &#125;, &#123;</div><div class="line">      <span class="attr">_name</span>: <span class="string">"汽车"</span>,</div><div class="line">      <span class="attr">num</span>: <span class="number">0</span></div><div class="line">    &#125;, &#123;</div><div class="line">      <span class="attr">_name</span>: <span class="string">"时尚"</span>,</div><div class="line">      <span class="attr">num</span>: <span class="number">0</span></div><div class="line">    &#125;];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  slideClick(slideIndex) &#123;</div><div class="line">    <span class="keyword">this</span>.slidesRef.slideTo(slideIndex);</div><div class="line">  &#125;</div><div class="line">  slideChanged($event) &#123;</div><div class="line">    <span class="keyword">let</span> currentIndex = <span class="keyword">this</span>.slidesRef.getActiveIndex();</div><div class="line">    <span class="comment">// this.alert.showAlert('sss');</span></div><div class="line">    <span class="keyword">this</span>.navSelectedIndex = currentIndex;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="抽屉效果"><a href="#抽屉效果" class="headerlink" title="抽屉效果"></a>抽屉效果</h2><p>先看效果：</p>
<p><img src="/static/img/ionic3-custom-component2.gif" alt="ionic3-custom-component2.gif"></p>
<p>抽屉效果，在做一些筛选选择条件的时候，交互首选的。这个官方没有提供组件实现，实现这个功能也必将简单，加上使用ng4的话，动画效果也很容易切换。下边是代码。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ion-content</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ion-backdrop</span> *<span class="attr">ngIf</span>=<span class="string">"toggleState==='in'"</span> <span class="attr">style</span>=<span class="string">"opacity:0.4"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-backdrop</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span> [@<span class="attr">toggleState</span>]=<span class="string">"toggleState"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--为了兼容android和ios，这里要留空16px,避免内容遮挡，所以加了margin-top--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">margin-top</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">ion-button</span> <span class="attr">small</span> <span class="attr">outline</span> (<span class="attr">click</span>)=<span class="string">"togglePanel()"</span>&gt;</span> 按钮1 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">ion-button</span> <span class="attr">small</span> <span class="attr">outline</span> (<span class="attr">click</span>)=<span class="string">"togglePanel()"</span>&gt;</span> 按钮2 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">ion-button</span> <span class="attr">small</span> <span class="attr">outline</span> (<span class="attr">click</span>)=<span class="string">"togglePanel()"</span>&gt;</span> 按钮3 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">margin-top</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;testData&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;testText&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top:240px;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">ion-button</span> <span class="attr">small</span> (<span class="attr">click</span>)=<span class="string">"togglePanel()"</span>&gt;</span> 这里是其他东西 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽屉动画+loading api调用举例</div><div class="line"> */</div><div class="line">@Component(&#123;</div><div class="line">    <span class="attr">selector</span>: <span class="string">'page-api-test'</span>,</div><div class="line">    <span class="attr">templateUrl</span>: <span class="string">'api-test.html'</span>,</div><div class="line">    <span class="attr">animations</span>: [ <span class="comment">// 动画的内容+ html里边的div的panel样式</span></div><div class="line">        trigger(<span class="string">'toggleState'</span>, [</div><div class="line">            state(<span class="string">'in'</span>, style(&#123;</div><div class="line">                <span class="attr">top</span>: <span class="string">'45px'</span></div><div class="line">            &#125;)),</div><div class="line">            state(<span class="string">'out'</span>, style(&#123;</div><div class="line">                <span class="attr">top</span>: <span class="string">'-200px'</span></div><div class="line">            &#125;)),</div><div class="line">            transition(<span class="string">'out =&gt; in'</span>, animate(<span class="string">'300ms ease-in'</span>)),</div><div class="line">            transition(<span class="string">'in =&gt; out'</span>, animate(<span class="string">'800ms ease-out'</span>))</div><div class="line">        ])</div><div class="line">    ]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiTestPage</span> </span>&#123;</div><div class="line"></div><div class="line">    toggleState = <span class="string">'out'</span>;</div><div class="line">    toggle: boolean = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>( ) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**动画内容start */</span></div><div class="line">    togglePanel() &#123;</div><div class="line">        <span class="keyword">this</span>.toggle = !<span class="keyword">this</span>.toggle;</div><div class="line">        <span class="keyword">this</span>.toggleState = <span class="keyword">this</span>.toggle ? <span class="string">'out'</span> : <span class="string">'in'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**动画内容end */</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重要的是要添加<code>ion-backdrop</code>组件，作为掩膜，禁止content内容可以点击。</p>
<h2 id="图片下载"><a href="#图片下载" class="headerlink" title="图片下载"></a>图片下载</h2><p>需要插件支持</p>
<ul>
<li><p><code>npm install @ionic-native/transfer</code></p>
</li>
<li><p><code>ionic cordova plugin add cordova-plugin-file-transfer</code></p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 下载文件 </div><div class="line">   * @param url </div><div class="line">   * @param fileName </div><div class="line">   */</div><div class="line">  download(url, fileName) &#123;</div><div class="line">      <span class="keyword">const</span> fileTransfer: TransferObject = <span class="keyword">this</span>.transfer.create();</div><div class="line">      <span class="keyword">return</span> fileTransfer.download(url, <span class="keyword">this</span>.file.dataDirectory + <span class="string">'download_'</span> + fileName);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 测试下载</span></div><div class="line"> downloadImage() &#123;</div><div class="line">      <span class="keyword">let</span> url = <span class="string">'https://img.alicdn.com/tps/TB1WvtYSXXXXXX4XXXXwu0bFXXX.png'</span>;</div><div class="line">      <span class="keyword">let</span> fineName = <span class="string">'tmail_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="string">'.png'</span>;</div><div class="line">      <span class="keyword">this</span>.download(url, fineName).then(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'下载后路径：'</span>+entry.toURL())</div><div class="line">      &#125;, (error) =&gt; &#123;</div><div class="line">        <span class="comment">// handle error</span></div><div class="line">        <span class="comment">// console.log('download error: ' + error)</span></div><div class="line">      &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="本地图片读取上传"><a href="#本地图片读取上传" class="headerlink" title="本地图片读取上传"></a>本地图片读取上传</h2><p>本地图片路径有两种格式，如下方代码注释，通过file插件中的readAsDataURL方法，将图片读取为Base64的格式，如果是后端接口是支持base64上传图片就可以直接上传，不然就如下使用<code>dataURItoBlob</code>方法转成Blob上传。</p>
<p><em>下边方法都封装在nativeService.ts服务类里</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Base64转File对象</div><div class="line">   * @param dataURI </div><div class="line">   */</div><div class="line">  dataURItoBlob(dataURI) &#123;</div><div class="line">      <span class="keyword">var</span> byteString = atob(dataURI.split(<span class="string">','</span>)[<span class="number">1</span>]);</div><div class="line">      <span class="keyword">var</span> mimeString = dataURI.split(<span class="string">','</span>)[<span class="number">0</span>].split(<span class="string">':'</span>)[<span class="number">1</span>].split(<span class="string">';'</span>)[<span class="number">0</span>];</div><div class="line">      <span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(byteString.length);</div><div class="line">      <span class="keyword">var</span> ia = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(ab);</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; byteString.length; i++) &#123;</div><div class="line">          ia[i] = byteString.charCodeAt(i);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Blob([ab], &#123; <span class="attr">type</span>: mimeString &#125;);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">  * 根据原生图片路径获取图片dataUrl</div><div class="line">  * 支持两种格式路径</div><div class="line">  * "/data/data/yzt.jzt/files/download_tmail_1499051584861.png"</div><div class="line">  * /storage/emulated/0/Pictures/IMG_20170626_104451.jpg</div><div class="line">  */</div><div class="line">  readAsDataURLByPath(path: string, <span class="attr">callback</span>: <span class="built_in">Function</span>) &#123;</div><div class="line">      <span class="keyword">let</span> that = <span class="keyword">this</span>;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'Cannot found requested file'</span> + err);</div><div class="line">      &#125;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">gotFile</span>(<span class="params">dataURL</span>) </span>&#123;</div><div class="line">          <span class="keyword">let</span> blob = that.dataURItoBlob(dataURL);</div><div class="line">          callback(blob);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">let</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">      <span class="keyword">if</span> (path) &#123;</div><div class="line">          <span class="keyword">if</span> (path.indexOf(<span class="string">'file://'</span>) !== <span class="number">0</span>) &#123;</div><div class="line">              path = <span class="string">'file://'</span> + path;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">let</span> fileNames = path.split(<span class="string">'/'</span>);</div><div class="line">          <span class="keyword">let</span> name = fileNames[fileNames.length - <span class="number">1</span>];</div><div class="line">          <span class="keyword">let</span> num = path.lastIndexOf(<span class="string">'/'</span>);</div><div class="line">          <span class="keyword">let</span> dirPath = path.substring(<span class="number">0</span>, num);</div><div class="line">          <span class="keyword">this</span>.file.readAsDataURL(dirPath, name).then(<span class="function"><span class="params">fileEnter</span> =&gt;</span> gotFile(fileEnter)).catch(<span class="function"><span class="params">err</span> =&gt;</span> fail(err));</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><strong>上传服务器</strong></p>
<p>将xhr FormData请求方式封装成Promise方法，方便调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 通过android和ios文件路径上传服务器</div><div class="line">  *  Creates a new file in the specific path.</div><div class="line">  * @param paths 文件路径数组 </div><div class="line">  * ["/storage/emulated/0/Pictures/IMG_20170626_104451.jpg"]</div><div class="line">  */</div><div class="line"> uploadByFileSystem(paths): any &#123;</div><div class="line">   <span class="keyword">let</span> fileBlobs = [];</div><div class="line"></div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">     <span class="keyword">this</span>.nativeService.showLoading(<span class="string">'图片上传中……'</span>);</div><div class="line">     <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> path <span class="keyword">of</span> paths) &#123;</div><div class="line">       <span class="keyword">this</span>.nativeService.readAsDataURLByPath(path, blob =&gt; &#123;</div><div class="line">         fileBlobs.push(blob);</div><div class="line">         formData.append(<span class="string">'file'</span>, blob, blob.name || <span class="string">'jzt_tmall_'</span> + fileBlobs.length + <span class="string">'.jpg'</span>);</div><div class="line">         <span class="keyword">if</span> (fileBlobs.length === paths.length) &#123;</div><div class="line">           <span class="keyword">this</span>.settings.getValue(<span class="string">'jwt'</span>).then(<span class="function"><span class="params">jwt</span> =&gt;</span> &#123;</div><div class="line">             <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">             xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">               <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</div><div class="line">                 <span class="keyword">this</span>.nativeService.hideLoading();</div><div class="line">                 <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) &#123;</div><div class="line">                   resolve(&#123; <span class="attr">xhr</span>: xhr, <span class="attr">formData</span>: formData &#125;);</div><div class="line">                 &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   reject(&#123; <span class="attr">xhr</span>: xhr, <span class="attr">formData</span>: formData &#125;);</div><div class="line">                 &#125;</div><div class="line">               &#125;</div><div class="line">             &#125;;</div><div class="line"></div><div class="line">             xhr.open(<span class="string">'POST'</span>, UPLOAD_URL, <span class="literal">true</span>);</div><div class="line">             xhr.setRequestHeader(<span class="string">"Authorization"</span>, <span class="string">"Bearer "</span> + jwt);</div><div class="line">             xhr.send(formData);</div><div class="line">           &#125;);</div><div class="line">         &#125;</div><div class="line">       &#125;);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">   &#125;);</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h2 id="相册选择图片上传"><a href="#相册选择图片上传" class="headerlink" title="相册选择图片上传"></a>相册选择图片上传</h2><p>使用插件 <a href="https://github.com/Telerik-Verified-Plugins/" target="_blank" rel="external">Telerik-Verified-Plugins</a>  ImagePicker即可选择图片，得到Base64格式或者url，上传代码和上边类似。</p>
<p><em>参考文章</em></p>
<p><a href="http://ourcodeworld.com/articles/read/22/solve-native-path-of-android-content-if-resolvelocalfilesystemurl-doesn-t-work" target="_blank" rel="external">http://ourcodeworld.com/articles/read/22/solve-native-path-of-android-content-if-resolvelocalfilesystemurl-doesn-t-work</a></p>
<h2 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h2><p><img src="http://blog.giscafer.com/static/images/qrcode_giscafer.jpg" alt="giscafer"></p>
<p><em>未完待续……</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ionic3官方提供了较多好用的组件和API。但是有些时候，我们用到的交互方式，官方的组件不是全都满足的。比如类似网易新闻APP，菜单的滑动效果。或者一些和业务接口紧密联系的组件。&lt;/p&gt;
&lt;h2 id=&quot;滑动菜单效果实现&quot;&gt;&lt;a href=&quot;#滑动菜单效果实现&quot; class=&quot;headerlink&quot; title=&quot;滑动菜单效果实现&quot;&gt;&lt;/a&gt;滑动菜单效果实现&lt;/h2&gt;&lt;p&gt; 推荐使用插件&lt;a href=&quot;https://github.com/zyra/ionic2-super-tabs&quot;&gt;ionic2-super-tabs&lt;/a&gt;，功能强大。下边是&lt;code&gt;slides + slides&lt;/code&gt;组合挖坑尝试&lt;/p&gt;
&lt;p&gt;最终效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/ionic3-custom-component1.gif&quot; alt=&quot;slides+slides实现菜单滑动&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Ionic" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/Ionic/"/>
    
    
      <category term="ionic" scheme="http://blog.giscafer.com/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>ionic3之图片选择插件com.synconset.imagepicker</title>
    <link href="http://blog.giscafer.com/2017/07/04/ionic-imagepicker/"/>
    <id>http://blog.giscafer.com/2017/07/04/ionic-imagepicker/</id>
    <published>2017-07-04T15:48:04.000Z</published>
    <updated>2017-07-07T13:41:33.775Z</updated>
    
    <content type="html"><![CDATA[<p><code>com.synconset.imagepicker</code>插件是telerik团队开发提供。</p>
<ul>
<li>官网：<a href="http://plugins.telerik.com/cordova/plugin/imagepicker" target="_blank" rel="external">http://plugins.telerik.com/cordova/plugin/imagepicker</a></li>
<li>github:<a href="https://github.com/Telerik-Verified-Plugins/ImagePicker" target="_blank" rel="external">https://github.com/Telerik-Verified-Plugins/ImagePicker</a></li>
</ul>
<p>使用命令安装 <code>ionic cordova plugin add cordova-plugin-image-picker</code></p>
<p>安装后需要修改中文支持。</p>
<a id="more"></a>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><h3 id="multiimagechooser-strings-en-xml文件修改"><a href="#multiimagechooser-strings-en-xml文件修改" class="headerlink" title="multiimagechooser_strings_en.xml文件修改"></a>multiimagechooser_strings_en.xml文件修改</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"multi_app_name"</span>&gt;</span>图片选择器<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"free_version_label"</span>&gt;</span>还可以选择 %d 张图片<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"error_database"</span>&gt;</span>打开图像数据库时出错,请反馈问题.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"requesting_thumbnails"</span>&gt;</span>请求缩略图，请耐心等待<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"multi_image_picker_processing_images_title"</span>&gt;</span>正在处理...<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"multi_image_picker_processing_images_message"</span>&gt;</span>请稍等...<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"discard"</span> <span class="attr">translatable</span>=<span class="string">"false"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"done"</span> <span class="attr">translatable</span>=<span class="string">"false"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>直接用上边代码覆盖<code>xx_project\plugins\com.synconset.imagepicker\src\android\Library\res\values\multiimagechooser_strings_en.xml</code>文件中的东西。</p>
<h3 id="MultiImageChooserActivity-java-弹窗汉化修改"><a href="#MultiImageChooserActivity-java-弹窗汉化修改" class="headerlink" title="MultiImageChooserActivity.java 弹窗汉化修改"></a>MultiImageChooserActivity.java 弹窗汉化修改</h3><p><code>工程\plugins\com.synconset.imagepicker\src\android\Library\src\MultiImageChooserActivity.java</code></p>
<p>用下边代码覆盖方法<code>onItemClick</code>中的对应代码（Line 199）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>)</div><div class="line">                .setTitle(<span class="string">"提示"</span>)</div><div class="line">                .setMessage(<span class="string">"您只能选择"</span> + maxImageCount + <span class="string">" 张图片"</span>)</div><div class="line">                .setPositiveButton(<span class="string">"知道了"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                        dialog.cancel();</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .create()</div><div class="line">                .show();</div></pre></td></tr></table></figure>
<h2 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h2><p>新增文件<code>ImagePicker/src/ios/GMImagePicker/zh-Hans.lproj/GMImagePicker.strings</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/* Cancel */</div><div class="line">"picker.navigation.cancel-button" = "取消";</div><div class="line"></div><div class="line">/* Done */</div><div class="line">"picker.navigation.done-button" = "完成";</div><div class="line"></div><div class="line">/* Navigation bar default title */</div><div class="line">"picker.navigation.title" = "我的相册";</div><div class="line"></div><div class="line">/* %@ Items Selected */</div><div class="line">"picker.selection.multiple-items" = "已选中 %@ 项";</div><div class="line"></div><div class="line">/* %@ Photos Selected */</div><div class="line">"picker.selection.multiple-photos" = "已选中 %@ 张照片";</div><div class="line"></div><div class="line">/* %@ Videos Selected */</div><div class="line">"picker.selection.multiple-videos" = "已选中 %@ 个视频";</div><div class="line"></div><div class="line">/* 1 Photo Selected */</div><div class="line">"picker.selection.single-photo" = "已选中 1 张照片";</div><div class="line"></div><div class="line">/* 1 Video Selected */</div><div class="line">"picker.selection.single-video" = "已选中 1 个视频";</div><div class="line"></div><div class="line">/* All photos */</div><div class="line">"picker.table.all-photos-label" = "相机胶卷";</div><div class="line"></div><div class="line">/* Smart Albums */</div><div class="line">"picker.table.smart-albums-header" = "智能相册";</div><div class="line"></div><div class="line">/* Albums */</div><div class="line">"picker.table.user-albums-header" = "相册";</div></pre></td></tr></table></figure>
<p><code>./plugin.xml</code>文件中添加上边文件引入</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">        <span class="tag">&lt;<span class="name">resource-file</span> <span class="attr">src</span>=<span class="string">"src/ios/GMImagePicker/fr.lproj"</span> /&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">resource-file</span> <span class="attr">src</span>=<span class="string">"src/ios/GMImagePicker/it.lproj"</span> /&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">resource-file</span> <span class="attr">src</span>=<span class="string">"src/ios/GMImagePicker/pt.lproj"</span> /&gt;</span></div><div class="line"></div><div class="line">+        <span class="tag">&lt;<span class="name">resource-file</span> <span class="attr">src</span>=<span class="string">"src/ios/GMImagePicker/zh-Hans.lproj"</span> /&gt;</span></div><div class="line"> </div><div class="line">         <span class="tag">&lt;<span class="name">framework</span> <span class="attr">src</span>=<span class="string">"Accelerate.framework"</span> /&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">framework</span> <span class="attr">src</span>=<span class="string">"Security.framework"</span> /&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">framework</span> <span class="attr">src</span>=<span class="string">"Photos.framework"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>新版本IOS不支持图片张数限制，具体见官方说明。<a href="http://plugins.telerik.com/cordova/plugin/imagepicker" target="_blank" rel="external">http://plugins.telerik.com/cordova/plugin/imagepicker</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>注意的是每次移除plugins重新安装插件的话都要修改一次。比较麻烦。其实可以将插件源码修改自己发布插件，这样就不用每次修改了。</p>
<p>github可以搜到别人汉化重新发布的插件，但是是两年前的，一直未更新，质量不敢保证，不怕麻烦就自己动手了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;com.synconset.imagepicker&lt;/code&gt;插件是telerik团队开发提供。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;http://plugins.telerik.com/cordova/plugin/imagepicker&quot;&gt;http://plugins.telerik.com/cordova/plugin/imagepicker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;github:&lt;a href=&quot;https://github.com/Telerik-Verified-Plugins/ImagePicker&quot;&gt;https://github.com/Telerik-Verified-Plugins/ImagePicker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用命令安装 &lt;code&gt;ionic cordova plugin add cordova-plugin-image-picker&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装后需要修改中文支持。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Ionic" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/Ionic/"/>
    
    
      <category term="ionic" scheme="http://blog.giscafer.com/tags/ionic/"/>
    
      <category term="imagepicker" scheme="http://blog.giscafer.com/tags/imagepicker/"/>
    
  </entry>
  
  <entry>
    <title>ionic3开发遇到的一些问题及解决方法</title>
    <link href="http://blog.giscafer.com/2017/06/29/ionic3-question-answer/"/>
    <id>http://blog.giscafer.com/2017/06/29/ionic3-question-answer/</id>
    <published>2017-06-29T14:06:54.000Z</published>
    <updated>2017-07-21T16:02:01.333Z</updated>
    
    <content type="html"><![CDATA[<p>两年前，第一家公司用过ionic1开发过APP，当时对ionic1了解的不是很熟，今年公司重写APP更换技术框架为ionic3，配合ng4的开发，重新接触ionic app开发后，个人感觉开发上效率比较高，日后有时间会深入研究。下边是APP重写时遇到的一些问题总结。</p>
<h2 id="不能使用组件名称作为条件判断依据"><a href="#不能使用组件名称作为条件判断依据" class="headerlink" title="不能使用组件名称作为条件判断依据"></a>不能使用组件名称作为条件判断依据</h2><p>为了实现token失效或超时登录，接口拦截请求跳转登录页面，起初我用了组件名称LoginPage作为判断，因为首页请求三个接口，进入首页的时候，三次请求都会判断为token失效，都会跳转登录页面，如果不做当前是否为登录页面判断，都跳转登录页面的话，会出现三次登录页面的重复跳转。</p>
<p>最开始代码为：<code>代码片段1</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//登录失效，自动跳转登录页面</span></div><div class="line">  <span class="keyword">if</span> (json[<span class="string">"code"</span>] === <span class="number">-9999</span>) &#123;</div><div class="line">       <span class="keyword">let</span> curActiveView = <span class="keyword">this</span>.nav.getActive();</div><div class="line">        <span class="comment">//根据登录页面组件名称为LoginPage判断</span></div><div class="line">       <span class="keyword">if</span> (curActiveView &amp;&amp; curActiveView.component.name!==<span class="string">'LoginPage'</span>) &#123;</div><div class="line">          <span class="keyword">this</span>.nav.push(LoginPage);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>然后改为：<code>代码片段2</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//登录失效，自动跳转登录页面</span></div><div class="line">  <span class="keyword">if</span> (json[<span class="string">"code"</span>] === <span class="number">-9999</span>) &#123;</div><div class="line">       <span class="keyword">let</span> curActiveView = <span class="keyword">this</span>.nav.getActive();</div><div class="line">            <span class="comment">//登录页面组件中的变量判断</span></div><div class="line">       <span class="keyword">if</span> (curActiveView &amp;&amp; !curActiveView.instance.loginPageModele) &#123;</div><div class="line">          <span class="keyword">this</span>.nav.push(LoginPage);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><code>代码片段1</code>中在debug模式，cordova run android或者cordova build android下都不会有问题。问题在产品模式打包下，加上<code>--prod</code>后缀打包就会有问题。因为<code>代码片段1</code>在–prod模式下代码会被压缩混淆了，组件名称都会改为<code>n</code>了，所有的组件名称都为<code>n</code>，也不清楚为什么都一样。</p>
<p><img src="/static/img/ionic3-question-answer1.png" alt=""></p>
<p>所以<code>代码片段2</code>为解决方案，组件名称压缩混淆，但是组件实例变量是不会混淆压缩的。</p>
<h2 id="图片的相对路径问题"><a href="#图片的相对路径问题" class="headerlink" title="图片的相对路径问题"></a>图片的相对路径问题</h2><p>ionic浏览器开发调式和build打包时路径是不一致的。如果在html页面里边直接写图片路径，就写到assets，比如<code>&lt;img src=&quot;assets/ui/certification.png&quot; width=&quot;40%&quot; height=&quot;40%&quot;&gt;</code>；但如果是在scss文件样式里边写，就用<code>../assets/</code>，比如<code>url(&quot;../assets/ui/tabs/icon_home_on.png&quot;);</code>。这样就能保证手机端和浏览器端都兼容了。</p>
<h2 id="ionic3新增了懒加载机制，-IonicPage"><a href="#ionic3新增了懒加载机制，-IonicPage" class="headerlink" title="ionic3新增了懒加载机制，@IonicPage()"></a>ionic3新增了懒加载机制，@IonicPage()</h2><p>如果使用命令创建页面<code>ionic g page xxxPage</code>的话，你会发现命令生成一个组件带有xxx.module.ts的文件，这个是配合组件xxx.component.ts里边的<code>@IonicPage()</code>进行懒加载的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; IonicPageModule &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</div><div class="line"><span class="keyword">import</span> &#123; CertificationModalPage &#125; <span class="keyword">from</span> <span class="string">'./certification-modal'</span>;</div><div class="line"></div><div class="line">@NgModule(&#123;</div><div class="line">  <span class="attr">declarations</span>: [</div><div class="line">    CertificationModalPage,</div><div class="line">  ],</div><div class="line">  <span class="attr">imports</span>: [</div><div class="line">  <span class="comment">//就是这里了。</span></div><div class="line">    IonicPageModule.forChild(CertificationModalPage),</div><div class="line">  ],</div><div class="line">  <span class="attr">exports</span>: [</div><div class="line">    CertificationModalPage</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CertificationModalPageModule</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>懒加载使用也必将方便，组件页面不需要注册，不用在app.module.ts里边declarations了。使用的时候用组件名称字符串替代。比如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">openCertificationModal() &#123;</div><div class="line">    <span class="comment">//'CertificationModalPage' 组件名称字符串就是懒加载，使用的时候不需要import导入改组件，直接字符串，ionic会帮我们注册组件和找到该组件。</span></div><div class="line">        <span class="keyword">let</span> myModal = <span class="keyword">this</span>.modalCtrl.create(<span class="string">'CertificationModalPage'</span>, &#123;&#125;, &#123;</div><div class="line">            <span class="attr">cssClass</span>: <span class="string">'custom-modal'</span></div><div class="line">        &#125;);</div><div class="line">        myModal.present();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>ionic3这个懒加载的特性，在开发的时候，创建页面就直接用起来，省去了很多注册组件的麻烦工作了。</p>
<p>当然，如果是纯组件，就建议使用非懒加载的方式，正常的根据ng2模块注册的方式声明注册。</p>
<h2 id="ModalController自定义弹窗"><a href="#ModalController自定义弹窗" class="headerlink" title="ModalController自定义弹窗"></a>ModalController自定义弹窗</h2><p><code>ModalController</code>是ionic3的API，使用它可以创建一个modal作为弹窗。弹窗是全屏的，不管是android是ios，wp中都是全屏。开发页面的时候，可能需要不是全屏的弹窗，但有不是alert的效果。</p>
<p>这时候有两个选择：</p>
<ul>
<li><p>自己用html写封装弹窗组件（开发时间可能多一些，封装成组件后还要考虑兼容性和动画效果等）</p>
</li>
<li><p>基于ModalController修改（样式覆盖，改为非全屏的小弹窗）</p>
</li>
</ul>
<p>二选一，都可以的。只要时间允许。由于App开发的时候时间很紧，就使用了第二种方式。下边简单介绍一下。</p>
<p>覆盖<code>ion-modal</code>样式要注意不能影响全局，如果样式全局覆盖了，全局的modal弹窗都会受到影响，这就不是想要的接口。ModalController API 提供了cssClass 选项，可以覆盖默认的样式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">openCertificationModal() &#123;</div><div class="line">    <span class="comment">//cssClass: 'custom-modal'为自定义覆盖样式</span></div><div class="line">        <span class="keyword">let</span> myModal = <span class="keyword">this</span>.modalCtrl.create(<span class="string">'CertificationModalPage'</span>, &#123;&#125;, &#123;</div><div class="line">            <span class="attr">cssClass</span>: <span class="string">'custom-modal'</span></div><div class="line">        &#125;);</div><div class="line">        myModal.present();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>样式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.custom-modal &#123;</div><div class="line">    // transparent black background overlay</div><div class="line">    background-color: rgba(0, 0, 0, .5) !important;</div><div class="line">    transition: opacity .25s ease-in-out;</div><div class="line">    padding: 20vh 10vw;</div><div class="line">    .scroll-content&#123;</div><div class="line">        overflow-x: hidden;</div><div class="line">        overflow-y: hidden;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终效果</p>
<p><img src="/static/img/ionic3-question-answer2.gif" alt="自定义样式modal效果"></p>
<h2 id="产品模式下，去掉所有无关功能的代码"><a href="#产品模式下，去掉所有无关功能的代码" class="headerlink" title="产品模式下，去掉所有无关功能的代码"></a>产品模式下，去掉所有无关功能的代码</h2><p>APP是团队开发，肯定会有人专门去做公共组件的开发，开发完成后，写demo页面给开发人员参考。demo页面在工程里边的话就要考虑APP打包发布的时候要去掉了。去掉的方式可以很简单规避掉demo代码。根据环境变量判断，是否引入注册相关的demo module就好了。所有demo页面放到一个module.ts里边注册，后期就方便了。</p>
<h2 id="图片组件删除缓冲域"><a href="#图片组件删除缓冲域" class="headerlink" title="图片组件删除缓冲域"></a>图片组件删除缓冲域</h2><p>删除X号太小，这时候需要做一个透明的div图层，代理删除点击事件，这样设定DIV的高度和宽度就是点击删除图片事件的点击区域了。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="selector-class">.del</span> &#123;</div><div class="line">        <span class="attribute">position</span>: absolute;</div><div class="line">        <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">        <span class="attribute">right</span>: <span class="number">0px</span>;</div><div class="line">        <span class="attribute">width</span>: <span class="number">18px</span>;</div><div class="line">        <span class="attribute">text-align</span>: center;</div><div class="line">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(152, 151, 151, 0.7);</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.del-area</span> &#123;</div><div class="line">        <span class="attribute">position</span>: absolute;</div><div class="line">        <span class="attribute">right</span>: <span class="number">5px</span>;</div><div class="line">        <span class="attribute">width</span>: <span class="number">30px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">30px</span>;</div><div class="line">        <span class="attribute">top</span>: <span class="number">0px</span>;</div><div class="line">        <span class="attribute">z-index</span>: <span class="number">1</span>;</div><div class="line">        <span class="attribute">text-align</span>: right;</div><div class="line">        <span class="attribute">background-color</span>:transparent;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div *ngFor=<span class="string">"let file of fileList;let i = index;"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"pictures"</span>    (press)=<span class="string">"deletePicture(i)"</span>&gt;</div><div class="line">       <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;file.url&#125;&#125;@w_100"</span> (<span class="attr">click</span>)=<span class="string">"viewerPicture(i)"</span> <span class="attr">width</span>=<span class="string">"85"</span> <span class="attr">height</span>=<span class="string">"85"</span> /&gt;</span></span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"del-area"</span> (<span class="attr">click</span>)=<span class="string">"delete(i)"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">"md-close"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="/static/img/ionic3-question-answer3.png" alt="图片组件删除"></p>
<h2 id="this-platform-ready-理解"><a href="#this-platform-ready-理解" class="headerlink" title="this.platform.ready()理解"></a>this.platform.ready()理解</h2><p><code>this.platform.ready()</code>是用来监听webView中cordova是否加载了，如果加载了cordova就会执行then后的语句。作用相当于web断的<code>window.onload</code>。</p>
<p>所以所有插件注册调用都要在ready之后操作。不然就会报<code>cordova is not defined</code>错误。cordova只有在非浏览器端才有，所以做如下平台判断在注册就不会报错了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * app初始化</div><div class="line"> */</div><div class="line">initializeApp() &#123;</div><div class="line">    <span class="keyword">this</span>.platform.ready().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">this</span>.global.set(<span class="string">'theme'</span>, <span class="string">'theme-default'</span>);</div><div class="line">        <span class="comment">// Okay, so the platform is ready and our plugins are available.</span></div><div class="line">        <span class="comment">// Here you can do any higher level native things you might need.</span></div><div class="line">        <span class="keyword">this</span>.statusBar.styleDefault();</div><div class="line">        <span class="keyword">this</span>.splashScreen.hide();</div><div class="line">        <span class="comment">// 真机</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.nativeService.isIos() || <span class="keyword">this</span>.nativeService.isAndroid()) &#123;</div><div class="line">            <span class="keyword">this</span>.initMsf();</div><div class="line">            <span class="keyword">this</span>.registerJPush();</div><div class="line">            <span class="keyword">this</span>.registerBackButtonAction();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中平台判断<code>this.nativeService.isIos() || this.nativeService.isAndroid()</code>方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 是否真机环境</div><div class="line">  * @return &#123;boolean&#125;</div><div class="line">  */</div><div class="line"> isMobile(): boolean &#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.platform.is(<span class="string">'mobile'</span>) &amp;&amp; !<span class="keyword">this</span>.platform.is(<span class="string">'mobileweb'</span>);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 是否android真机环境</div><div class="line">  * @return &#123;boolean&#125;</div><div class="line">  */</div><div class="line"> isAndroid(): boolean &#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.isMobile() &amp;&amp; <span class="keyword">this</span>.platform.is(<span class="string">'android'</span>);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 是否ios真机环境</div><div class="line">  * @return &#123;boolean&#125;</div><div class="line">  */</div><div class="line"> isIos(): boolean &#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.isMobile() &amp;&amp; (<span class="keyword">this</span>.platform.is(<span class="string">'ios'</span>) || <span class="keyword">this</span>.platform.is(<span class="string">'ipad'</span>) || <span class="keyword">this</span>.platform.is(<span class="string">'iphone'</span>));</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h2 id="打包启动页卡住，需要按HOME键"><a href="#打包启动页卡住，需要按HOME键" class="headerlink" title="打包启动页卡住，需要按HOME键"></a>打包启动页卡住，需要按HOME键</h2><p>调式会发现如下错误：</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Ionic Native: deviceready did not fire within <span class="number">5000</span>ms. This can happen when plugins are <span class="keyword">in</span> an inconsistent <span class="keyword">state</span>. Try removing plugins <span class="keyword">from</span> plugins/ and reinstalling them.</div></pre></td></tr></table></figure>
<p>网上会有很多相关的问题，都说什么重新移除platform或者plugins，重新安装什么的。试过都不行，然后我调整了一下index.html里边cordova.js的引入顺序，放到了body标签之前就可以了。之前还看到stackoverflow有人建议放到body标签末尾的。。。</p>
<h2 id="安卓物理返回键监听"><a href="#安卓物理返回键监听" class="headerlink" title="安卓物理返回键监听"></a>安卓物理返回键监听</h2><p>根菜单双击返回按键，最小化应用，插件<code>ionic cordova plugin add cordova-plugin-appminimize</code>。顺便说一句，如果双击关闭APP的话不需要额外插件，执行<code>this.platform.exitApp();</code>即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回按钮事件</div><div class="line"> */</div><div class="line">registerBackButtonAction() &#123;</div><div class="line">    <span class="keyword">this</span>.platform.registerBackButtonAction(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> activePortal = <span class="keyword">this</span>.ionicApp._modalPortal.getActive();</div><div class="line">        <span class="keyword">if</span> (activePortal) &#123;</div><div class="line">            activePortal.dismiss().catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            &#125;);</div><div class="line">            activePortal.onDidDismiss(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> activeVC = <span class="keyword">this</span>.nav.getActive();</div><div class="line">        <span class="keyword">let</span> tabs = activeVC.instance.tabs;</div><div class="line">        <span class="keyword">let</span> activeNav = tabs.getSelected();</div><div class="line">        <span class="keyword">return</span> activeNav.canGoBack() ? activeNav.pop() : <span class="keyword">this</span>.showExit()</div><div class="line">    &#125;, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 双击退出提示框</div><div class="line"> */</div><div class="line">showExit() &#123;</div><div class="line">    <span class="comment">//当触发标志为true时，即2秒内双击返回按键则最小化APP</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.backButtonPressed) &#123;</div><div class="line">       <span class="comment">//this.appMinimize.minimize();</span></div><div class="line">       <span class="keyword">this</span>.platform.exitApp();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>.toastCtrl.create(&#123;</div><div class="line">            <span class="attr">message</span>: <span class="string">'再按一次退出应用'</span>,</div><div class="line">            <span class="attr">duration</span>: <span class="number">2000</span>,</div><div class="line">            <span class="attr">position</span>: <span class="string">'top'</span></div><div class="line">        &#125;).present();</div><div class="line">        <span class="keyword">this</span>.backButtonPressed = <span class="literal">true</span>;</div><div class="line">        <span class="comment">// 2秒内没有再次点击返回则将触发标志标记为false</span></div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.backButtonPressed = <span class="literal">false</span>, <span class="number">2000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>参考文章: <a href="http://www.jianshu.com/p/6aa5a8318092" target="_blank" rel="external">http://www.jianshu.com/p/6aa5a8318092</a></li>
</ul>
<h2 id="IOS-真机click事件不灵敏问题"><a href="#IOS-真机click事件不灵敏问题" class="headerlink" title="IOS 真机click事件不灵敏问题"></a>IOS 真机click事件不灵敏问题</h2><p>点击的标签加上<code>tappable</code>属性</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;ion-item tappable *ngFor=<span class="string">"let page of pages"</span> (<span class="name">click</span>)=<span class="string">"openMenuPage(page)"</span>&gt;</div></pre></td></tr></table></figure>
<p>参考文献</p>
<ul>
<li><a href="http://www.codingandclimbing.co.uk/blog/ionic-2-fix-ios-side-menu-double-tap-bug" target="_blank" rel="external">http://www.codingandclimbing.co.uk/blog/ionic-2-fix-ios-side-menu-double-tap-bug</a></li>
<li><a href="https://github.com/ionic-team/ionic/issues/11616" target="_blank" rel="external">https://github.com/ionic-team/ionic/issues/11616</a></li>
</ul>
<h2 id="魅族手机cordova-plugin-camera"><a href="#魅族手机cordova-plugin-camera" class="headerlink" title="魅族手机cordova-plugin-camera"></a>魅族手机cordova-plugin-camera</h2><p><code>cordova-plugin-camera</code>插件allowEdit属性设置,在魅族手机进入相册选择图片的时候会卡着不动。去掉就可以了。<br>拍照则是正常的。</p>
<h2 id="跳转页面禁止返回"><a href="#跳转页面禁止返回" class="headerlink" title="跳转页面禁止返回"></a>跳转页面禁止返回</h2><p>比如退出登录，跳转登录页面后，不能让用户通过物理返回按键返回到之前的页面栈中。使用方式：<br><code>this.app.getRootNav().setRoot(LoginPage);</code></p>
<p>使用this.navCtrl.setRoot()会在菜单中嵌入页面，达不到效果。</p>
<h2 id="安装ImagePicker插件失败"><a href="#安装ImagePicker插件失败" class="headerlink" title="安装ImagePicker插件失败"></a>安装ImagePicker插件失败</h2><p>偶尔会遇到安装ImagePicker插件失败的情况，很烦，错误提示检查网络连接。实际上不是，使用下边命令即可解决。</p>
<pre><code>cordova plugin install https://github.com/dhavalsoni2001/ImagePicker.git
</code></pre><p>解决方案来自github,<a href="https://github.com/Telerik-Verified-Plugins/ImagePicker/issues/55" target="_blank" rel="external">https://github.com/Telerik-Verified-Plugins/ImagePicker/issues/55</a></p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">So running Ionic cordova plugin install http<span class="variable">s:</span>//github.<span class="keyword">com</span>/dhavalsoni2001/ImagePicker.git -&gt; does not work.</div><div class="line">but running cordova plugin install http<span class="variable">s:</span>//github.<span class="keyword">com</span>/dhavalsoni2001/ImagePicker.git worked <span class="keyword">for</span> <span class="keyword">me</span>.</div><div class="line">thanks</div></pre></td></tr></table></figure>
<p>后期作者修复问题可能就不存在了。</p>
<h2 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h2><p><img src="http://blog.giscafer.com/static/images/qrcode_giscafer.jpg" alt="giscafer"></p>
<p><em>未完待续……</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;两年前，第一家公司用过ionic1开发过APP，当时对ionic1了解的不是很熟，今年公司重写APP更换技术框架为ionic3，配合ng4的开发，重新接触ionic app开发后，个人感觉开发上效率比较高，日后有时间会深入研究。下边是APP重写时遇到的一些问题总结。&lt;/p&gt;
&lt;h2 id=&quot;不能使用组件名称作为条件判断依据&quot;&gt;&lt;a href=&quot;#不能使用组件名称作为条件判断依据&quot; class=&quot;headerlink&quot; title=&quot;不能使用组件名称作为条件判断依据&quot;&gt;&lt;/a&gt;不能使用组件名称作为条件判断依据&lt;/h2&gt;&lt;p&gt;为了实现token失效或超时登录，接口拦截请求跳转登录页面，起初我用了组件名称LoginPage作为判断，因为首页请求三个接口，进入首页的时候，三次请求都会判断为token失效，都会跳转登录页面，如果不做当前是否为登录页面判断，都跳转登录页面的话，会出现三次登录页面的重复跳转。&lt;/p&gt;
&lt;p&gt;最开始代码为：&lt;code&gt;代码片段1&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//登录失效，自动跳转登录页面&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (json[&lt;span class=&quot;string&quot;&gt;&quot;code&quot;&lt;/span&gt;] === &lt;span class=&quot;number&quot;&gt;-9999&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; curActiveView = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.nav.getActive();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//根据登录页面组件名称为LoginPage判断&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (curActiveView &amp;amp;&amp;amp; curActiveView.component.name!==&lt;span class=&quot;string&quot;&gt;&#39;LoginPage&#39;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.nav.push(LoginPage);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Ionic" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/Ionic/"/>
    
    
      <category term="ionic" scheme="http://blog.giscafer.com/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>ionic3之自定义tabs菜单图标</title>
    <link href="http://blog.giscafer.com/2017/06/27/ionic3-tab-custom-icon/"/>
    <id>http://blog.giscafer.com/2017/06/27/ionic3-tab-custom-icon/</id>
    <published>2017-06-27T14:08:02.000Z</published>
    <updated>2017-06-27T14:14:54.143Z</updated>
    
    <content type="html"><![CDATA[<p>ionic的tabs组件默认图标更换方式可以通过自定义图标样式来替换。自定义图标可以是图标字体库，也可以是png图标等。</p>
<p>在tabs.scss文件（组件作用域），或者全局app.scss覆盖都行。下边是菜单覆盖代码：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">page-tabs &#123;</div><div class="line">    <span class="selector-class">.ion-tab-icon-base</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">32px</span> <span class="meta">!important</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">32px</span> <span class="meta">!important</span>;</div><div class="line">        <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">4px</span> <span class="number">2px</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.ion-tab-icon-md-base</span> &#123;</div><div class="line">        <span class="attribute">min-width</span>: <span class="number">0</span> <span class="meta">!important</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">32px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="variable">$tabImageName</span>: <span class="string">'home'</span> <span class="string">'task'</span> <span class="string">'master'</span> <span class="string">'my'</span>;</div><div class="line">    @<span class="keyword">for</span> <span class="variable">$i</span> from 1 to 5 &#123;</div><div class="line">        <span class="comment">//for ios</span></div><div class="line">        <span class="selector-class">.ion-ios-tab-</span>#&#123;nth(<span class="variable">$tabImageName</span>, <span class="variable">$i</span>)&#125; &#123;</div><div class="line">            @<span class="keyword">extend</span> .ion-tab-icon-base;</div><div class="line">            <span class="attribute">content</span>: url(<span class="string">"../../assets/ui/tabs/icon_#&#123;nth($tabImageName, $i)&#125;_on.png"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.ion-ios-tab-</span>#&#123;nth(<span class="variable">$tabImageName</span>, <span class="variable">$i</span>)&#125;-<span class="attribute">outline</span> &#123;</div><div class="line">            @<span class="keyword">extend</span> .ion-tab-icon-base;</div><div class="line">            <span class="attribute">content</span>: url(<span class="string">"../../assets/ui/tabs/icon_#&#123;nth($tabImageName, $i)&#125;_off.png"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// for android</span></div><div class="line">        <span class="selector-class">.tabs-md</span> <span class="selector-class">.tab-button</span><span class="selector-attr">[aria-selected=true]</span> &#123;</div><div class="line">            <span class="selector-class">.ion-md-tab-</span>#&#123;nth(<span class="variable">$tabImageName</span>, <span class="variable">$i</span>)&#125; &#123;</div><div class="line">                @<span class="keyword">extend</span> .ion-tab-icon-md-base;</div><div class="line">                <span class="attribute">content</span>: url(<span class="string">"../../assets/ui/tabs/icon_#&#123;nth($tabImageName, $i)&#125;_on.png"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.tabs-md</span> <span class="selector-class">.tab-button</span><span class="selector-attr">[aria-selected=false]</span> &#123;</div><div class="line">            <span class="selector-class">.ion-md-tab-</span>#&#123;nth(<span class="variable">$tabImageName</span>, <span class="variable">$i</span>)&#125; &#123;</div><div class="line">                @<span class="keyword">extend</span> .ion-tab-icon-md-base;</div><div class="line">                <span class="attribute">content</span>: url(<span class="string">"../../assets/ui/tabs/icon_#&#123;nth($tabImageName, $i)&#125;_off.png"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.ion-ios-tab-task</span>,<span class="selector-class">.ion-ios-tab-task-outline</span>,<span class="selector-class">.ion-ios-tab-master</span>,<span class="selector-class">.ion-ios-tab-master-outline</span>&#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">30px</span> <span class="meta">!important</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">32px</span> <span class="meta">!important</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>使用了scss的语法，定义 <code>$tabImageName: &#39;home&#39; &#39;task&#39; &#39;master&#39; &#39;my&#39;;</code>数组，然后循环，通过<code>#{nth($tabImageName, $i)}</code>取出循环中的每个元素，定义每个图标的样式，这个就是scss预编译样式的好处，省去重复的工作和重复的代码。</p>
<p>从样式代码可以看出，定义了两份代码，一份是ios的<code>ion-ios-</code>前缀，一份是android版本的<code>ion-md-</code>与<code>.tabs-md</code>前缀，还有这个是ionic对不同平台有不同的样式，如果了解一看就明白了。<code>-outline</code>为ios未选中样式，<code>[aria-selected=false]</code>为android未选中样式。</p>
<p>然后在html里边，修改<code>tabIcon</code>为样式中定义的图标即可。（上边样式图标统一加了<code>tab-</code>前缀，为了和自带图标区分开来）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ion-tabs</span> #<span class="attr">mainTabs</span> [<span class="attr">selectedIndex</span>]=<span class="string">"mySelectedIndex"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ion-tab</span> [<span class="attr">root</span>]=<span class="string">"homeView"</span> <span class="attr">tabTitle</span>=<span class="string">"首页"</span> <span class="attr">tabIcon</span>=<span class="string">"tab-home"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-tab</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ion-tab</span> [<span class="attr">root</span>]=<span class="string">"taskView"</span> <span class="attr">tabTitle</span>=<span class="string">"任务"</span> <span class="attr">tabIcon</span>=<span class="string">"tab-task"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-tab</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ion-tab</span> [<span class="attr">root</span>]=<span class="string">"courseView"</span> <span class="attr">tabTitle</span>=<span class="string">"师傅学院"</span> <span class="attr">tabIcon</span>=<span class="string">"tab-master"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-tab</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ion-tab</span> [<span class="attr">root</span>]=<span class="string">"userCenterView"</span> <span class="attr">tabTitle</span>=<span class="string">"我的"</span> <span class="attr">tabIcon</span>=<span class="string">"tab-my"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-tab</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ion-tab</span> [<span class="attr">root</span>]=<span class="string">"demoView"</span> <span class="attr">tabTitle</span>=<span class="string">"DEMO"</span> <span class="attr">tabIcon</span>=<span class="string">"bug"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-tab</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ion-tabs</span>&gt;</span></div></pre></td></tr></table></figure>
<p>图标路径放在<code>src/assets/ui</code>下，如图</p>
<p><img src="/static/img/ionic3-tabs-icon1.png" alt="图标路径"></p>
<p>更换前和更换后对比</p>
<p><img src="/static/img/ionic3-tabs-icon3.png" alt="自带图标"></p>
<p><img src="/static/img/ionic3-tabs-icon2.png" alt="自定义图标"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ionic的tabs组件默认图标更换方式可以通过自定义图标样式来替换。自定义图标可以是图标字体库，也可以是png图标等。&lt;/p&gt;
&lt;p&gt;在tabs.scss文件（组件作用域），或者全局app.scss覆盖都行。下边是菜单覆盖代码：&lt;/p&gt;
&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;page-tabs &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.ion-tab-icon-base&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;32px&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;!important&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;32px&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;!important&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.ion-tab-icon-md-base&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;min-width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;!important&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;32px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;$tabImageName&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;home&#39;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;task&#39;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;master&#39;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;my&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt; from 1 to 5 &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//for ios&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;selector-class&quot;&gt;.ion-ios-tab-&lt;/span&gt;#&amp;#123;nth(&lt;span class=&quot;variable&quot;&gt;$tabImageName&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt;)&amp;#125; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            @&lt;span class=&quot;keyword&quot;&gt;extend&lt;/span&gt; .ion-tab-icon-base;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: url(&lt;span class=&quot;string&quot;&gt;&quot;../../assets/ui/tabs/icon_#&amp;#123;nth($tabImageName, $i)&amp;#125;_on.png&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;selector-class&quot;&gt;.ion-ios-tab-&lt;/span&gt;#&amp;#123;nth(&lt;span class=&quot;variable&quot;&gt;$tabImageName&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt;)&amp;#125;-&lt;span class=&quot;attribute&quot;&gt;outline&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            @&lt;span class=&quot;keyword&quot;&gt;extend&lt;/span&gt; .ion-tab-icon-base;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: url(&lt;span class=&quot;string&quot;&gt;&quot;../../assets/ui/tabs/icon_#&amp;#123;nth($tabImageName, $i)&amp;#125;_off.png&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// for android&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;selector-class&quot;&gt;.tabs-md&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.tab-button&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[aria-selected=true]&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;selector-class&quot;&gt;.ion-md-tab-&lt;/span&gt;#&amp;#123;nth(&lt;span class=&quot;variable&quot;&gt;$tabImageName&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt;)&amp;#125; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                @&lt;span class=&quot;keyword&quot;&gt;extend&lt;/span&gt; .ion-tab-icon-md-base;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: url(&lt;span class=&quot;string&quot;&gt;&quot;../../assets/ui/tabs/icon_#&amp;#123;nth($tabImageName, $i)&amp;#125;_on.png&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;selector-class&quot;&gt;.tabs-md&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.tab-button&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[aria-selected=false]&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;selector-class&quot;&gt;.ion-md-tab-&lt;/span&gt;#&amp;#123;nth(&lt;span class=&quot;variable&quot;&gt;$tabImageName&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt;)&amp;#125; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                @&lt;span class=&quot;keyword&quot;&gt;extend&lt;/span&gt; .ion-tab-icon-md-base;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: url(&lt;span class=&quot;string&quot;&gt;&quot;../../assets/ui/tabs/icon_#&amp;#123;nth($tabImageName, $i)&amp;#125;_off.png&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.ion-ios-tab-task&lt;/span&gt;,&lt;span class=&quot;selector-class&quot;&gt;.ion-ios-tab-task-outline&lt;/span&gt;,&lt;span class=&quot;selector-class&quot;&gt;.ion-ios-tab-master&lt;/span&gt;,&lt;span class=&quot;selector-class&quot;&gt;.ion-ios-tab-master-outline&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;!important&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;32px&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;!important&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Ionic" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/Ionic/"/>
    
    
      <category term="Ionic" scheme="http://blog.giscafer.com/tags/Ionic/"/>
    
      <category term="tabs图标" scheme="http://blog.giscafer.com/tags/tabs%E5%9B%BE%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>ionic3 之Android的actionsheet渲染和ios一致</title>
    <link href="http://blog.giscafer.com/2017/06/19/ionic-md-action-sheet/"/>
    <id>http://blog.giscafer.com/2017/06/19/ionic-md-action-sheet/</id>
    <published>2017-06-19T14:01:58.000Z</published>
    <updated>2017-06-23T13:13:49.587Z</updated>
    
    <content type="html"><![CDATA[<p>Android的action-sheet是比较丑，默认几乎不带样式，如果不给图标的话。如图：</p>
<p><img src="/static/img/ionic-md-action-sheet1.jpg" alt=""></p>
<a id="more"></a>
<p>首先对比一下ios和android样式的区别，然后在ionic.css文件中，将ios的action-sheet样式拷贝出来，独立为<code>actionsheet.scss</code>，这样就可以覆盖了。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line">* 覆盖action-sheet样式</div><div class="line">*</div><div class="line">**/</div><div class="line">.action-sheet-md &#123;</div><div class="line">    text-align: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.action-sheet-md .action-sheet-container &#123;</div><div class="line">    padding: 0 10px;</div><div class="line">    background: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.action-sheet-md .action-sheet-group &#123;</div><div class="line">    overflow: hidden;</div><div class="line">    margin-bottom: 8px;</div><div class="line">    border-radius: 13px;</div><div class="line">    background: #f9f9f9;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.action-sheet-md .action-sheet-group:last-child &#123;</div><div class="line">    margin-bottom: 10px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.action-sheet-md .action-sheet-title &#123;</div><div class="line">    text-align: center;</div><div class="line">    padding: 1.5rem;</div><div class="line">    border-bottom: 0.55px solid #d6d6da;</div><div class="line">    border-radius: 0;</div><div class="line">    font-size: 1.3rem;</div><div class="line">    font-weight: 400;</div><div class="line">    color: #8f8f8f;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.action-sheet-md .action-sheet-button &#123;</div><div class="line">    margin: 0;</div><div class="line">    padding: 18px;</div><div class="line">    min-height: 5.6rem;</div><div class="line">    border-bottom: 0.55px solid #d6d6da;</div><div class="line">    font-size: 2rem;</div><div class="line">    color: #007aff;</div><div class="line">    background: transparent;</div><div class="line">    .button-inner &#123;</div><div class="line">        display: -webkit-flex;</div><div class="line">        display: -ms-flexbox;</div><div class="line">        display: flex;</div><div class="line">        -webkit-flex-flow: row nowrap;</div><div class="line">        -ms-flex-flow: row nowrap;</div><div class="line">        flex-flow: row nowrap;</div><div class="line">        -webkit-flex-shrink: 0;</div><div class="line">        -ms-flex-negative: 0;</div><div class="line">        flex-shrink: 0;</div><div class="line">        -webkit-align-items: center;</div><div class="line">        -ms-flex-align: center;</div><div class="line">        align-items: center;</div><div class="line">        -webkit-justify-content: center;</div><div class="line">        -ms-flex-pack: center;</div><div class="line">        justify-content: center;</div><div class="line">        width: 100%;</div><div class="line">        height: 100%;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.action-sheet-md .action-sheet-button:last-child &#123;</div><div class="line">    border-bottom-color: transparent;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.action-sheet-md .action-sheet-button.activated &#123;</div><div class="line">    margin-top: -0.55px;</div><div class="line">    border-top: 0.55px solid #ebebeb;</div><div class="line">    border-bottom-color: #ebebeb;</div><div class="line">    background: #ebebeb;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.action-sheet-md .action-sheet-selected &#123;</div><div class="line">    font-weight: bold;</div><div class="line">    background: #fff;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.action-sheet-md .action-sheet-destructive &#123;</div><div class="line">    color: #f53d3d;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.action-sheet-md .action-sheet-cancel &#123;</div><div class="line">    font-weight: 600;</div><div class="line">    background: #fff;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终效果如图：</p>
<p><img src="/static/img/ionic-md-action-sheet2.jpg" alt=""></p>
<p>其实ionic支持指定UI渲染模式，config设置<code>mode</code>为<code>ios</code>即可</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android的action-sheet是比较丑，默认几乎不带样式，如果不给图标的话。如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/ionic-md-action-sheet1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Ionic" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/Ionic/"/>
    
    
      <category term="ionic" scheme="http://blog.giscafer.com/tags/ionic/"/>
    
      <category term="actionsheet" scheme="http://blog.giscafer.com/tags/actionsheet/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客畅言评论插件试用</title>
    <link href="http://blog.giscafer.com/2017/06/07/hexo-changyan/"/>
    <id>http://blog.giscafer.com/2017/06/07/hexo-changyan/</id>
    <published>2017-06-06T17:12:16.000Z</published>
    <updated>2017-06-06T17:34:04.281Z</updated>
    
    <content type="html"><![CDATA[<p>深夜试了一下<code>畅言</code>评论插件，对Hexo博客主题<a href="https://github.com/giscafer/hexo-theme-cafe/" target="_blank" rel="external">Cafe</a>做了扩展，初略体验了一下，确实很不错。</p>
<h3 id="评论插件社交化"><a href="#评论插件社交化" class="headerlink" title="评论插件社交化"></a>评论插件社交化</h3><p>畅言评论插件支持手机号，微信，微博，QQ登录，是国内主流社交平台，使用方便，更容易引流。相比网易云跟帖，只能网易账号登录就略坑了。</p>
<h3 id="界面美观-个人主页"><a href="#界面美观-个人主页" class="headerlink" title="界面美观+个人主页"></a>界面美观+个人主页</h3><p>自适应网站界面，并能定制评论界面演示和文字提示等，还有盖章贴图，可以进入个人畅言中心</p>
<p><img src="/static/img/hexo-changyan-demo.gif" alt="测试"></p>
<h3 id="限制约束"><a href="#限制约束" class="headerlink" title="限制约束"></a>限制约束</h3><p>使用畅言必须要做的是一件事——域名备案，不然只能体验15天。本人的<code>giscafer.com</code>域名没有备案，历史原因。因个人域名<code>gis520.com</code>在陕西备案了，占用了主体信息（每个人只能有一个域名主体信息），目前人在广州，如果要陕西主题信息备案域名比较麻烦，目前先不考虑。</p>
<p>——&lt;完&gt;——</p>
<p>如果你也喜欢<code>Cafe</code>主题，欢迎使用并提建议改善。<a href="https://github.com/giscafer/hexo-theme-cafe/" target="_blank" rel="external">https://github.com/giscafer/hexo-theme-cafe/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;深夜试了一下&lt;code&gt;畅言&lt;/code&gt;评论插件，对Hexo博客主题&lt;a href=&quot;https://github.com/giscafer/hexo-theme-cafe/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cafe&lt;/a&gt;做了扩展，初略体
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Hexo" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://blog.giscafer.com/tags/Hexo/"/>
    
      <category term="畅言" scheme="http://blog.giscafer.com/tags/%E7%95%85%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>从GISer到互联网前端工程师，JUST DO IT</title>
    <link href="http://blog.giscafer.com/2017/05/10/giser-just-do-it/"/>
    <id>http://blog.giscafer.com/2017/05/10/giser-just-do-it/</id>
    <published>2017-05-09T16:22:01.000Z</published>
    <updated>2017-05-09T16:26:35.801Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文首发于个人博客与个人微信公众号</em></p>
<p>更多经验分享欢迎围观本人 Live<a href="https:## www.zhihu.com/lives/844909623906549760" target="_blank" rel="external">「从 giser 到前端开发经理之路」</a></p>
<h2 id="我与GIS的结缘"><a href="#我与GIS的结缘" class="headerlink" title="我与GIS的结缘"></a>我与GIS的结缘</h2><p>2010年，我考上了西北农林科技大学，原第一志愿是机械相关的专业，服从调剂后，就被调配到了资环学院的地理信息系统专业，当时我是完全不知道地理信息系统是干什么的，更不清楚毕业能做什么工作，查了百科，专业的介绍更加懵逼了。</p>
<p>大一也没学什么专业课，尴尬的是回家，亲朋好友问所学专业，只能说是画地图的，后来学习遥感后，就说做遥感、GPS导航的。然后村里的老大爷听到就纷纷点头说，高科技啊，有前途！</p>
<p>一直到上大三，我才真正知道GIS毕业能做什么工作，大概有这么个方向：GIS相关软件使用相关岗位（包括数据处理，技术支持）、销售岗位（卖软件或者其他影像销售）、遥感相关从业技术人员（国内只有国企、事业单位）、测绘相关、IT方向；</p>
<a id="more"></a>
<h2 id="面对就业方向我是如何选择的"><a href="#面对就业方向我是如何选择的" class="headerlink" title="面对就业方向我是如何选择的"></a>面对就业方向我是如何选择的</h2><p><strong>GIS相关软件使用相关岗位</strong></p>
<p>性格不合适，读书的时候，有点高傲，认为软件使用没什么技术含量，并且觉得数据处理，数据矢量化什么的，是干苦力活的，所以不会考虑这个就业方向；</p>
<p><strong>销售岗位</strong></p>
<p>还是性格原因，不感兴趣，并且从来没有销售本领，像女生表白都没什么技术，何况推荐物品给别人；认为好的产品，做点广告你会自觉过来买，在人旁边唠叨推荐，我就觉得心烦。这也是为什么只去那些没有推荐员的衣服店里买衣服的原因~</p>
<p><strong>遥感相关从业技术人员</strong></p>
<p>个人并不打算考公务员，所以进国企事业单位没多考虑，并且在学校里边学习遥感相关的东西，也就是用Erdas处理影像，简单的成像识别，一些书本上的概念原理；本科学不到什么，想从事遥感技术方向的工作也比较困难。</p>
<p><strong>测绘相关</strong></p>
<p>实习的时候就体验过了，自己不适合做这行，感谢测绘人员对GIS基础数据的共享！</p>
<p><strong>IT行业</strong></p>
<p>和性格爱好有关，喜欢玩电脑，这里的玩电脑并不是说玩游戏，大学四年，我玩的游戏只有NBA2K，打打三国战绩，拳皇，游戏上浪费的时间很少（很庆幸）；然而我喜欢整的是软件安装破解，重装系统，网站搭建推广什么的。GIS520社区就是大三暑假的时候整的。尴尬的是，到了大四，我能从事IT行业相关工作也没什么技术，能胜任选择的确实只有数据处理相关的技术支持岗位。但我当时的内心是做编程开发，兴趣是从搭建GIS520产生的，于是我就开始自学一些编程技术。</p>
<p><strong>（以上仅是当初个人想法）</strong></p>
<h2 id="转折点—实习"><a href="#转折点—实习" class="headerlink" title="转折点—实习"></a>转折点—实习</h2><p>大三其实有准备考研，我选择考研的目的是担心找不到好工作，想从事编程行业，但是白纸一张，作为资源环境学院的地信专业，非常不重视计算机编程方向，软件系统原理，编程思想等课堂为0，然而在大一大二的我并没有觉悟到，一心想玩了（高中老师说的，上大学就可以好好玩了）。其实是怪自己，觉悟不高，另外环境氛围问题，我们学校的地信专业，IT编程方向就业氛围就不好，不能从学长学姐那里得到经验。</p>
<p>考研复习没坚持到最后，我就看编程书去了（考研不考编程），然后遇到了秋招，一家地信公司来我们学校招聘开发工程师，很幸运，人生第一次面试，还表现的很挫，也都能面试通过。最后去北京实习了不到两个月。</p>
<p>实习过程是懵逼的，很多东西上手不懂，有点混，但是自己也努力的去搞明白，学基础。</p>
<p>因为表现不好，在实习几周后，又一次被经理叫去聊天，问我是否对技术支持感兴趣，谈谈现在工作的看法。我表现的自卑，也说明自己目前技术不行，但是很不喜欢软件相关使用工作。然后就一直默默的干到实习结束，记得是清明准备放假，找个理由就回学校玩了。</p>
<p>虽然实习没能给公司贡献什么，但是实习的机会却使得我找到了方向，我清楚自己需要学习什么，从事WebGIS开发方向所需要掌握的技术，回学校后我就有空就一直学习。技术的学习方向并没有学长学姐可以请假，我是自己摸索的，当时找方向是这样的，查看招聘岗位要求的技能，就记下来，总结出来，然后就学习相关的技术。</p>
<h2 id="GIS软件开发工程师"><a href="#GIS软件开发工程师" class="headerlink" title="GIS软件开发工程师"></a>GIS软件开发工程师</h2><p>毕业了，我就去了实习的公司报道，当时有个好处就是，实习过的学生，毕业可以直接转正，所以，报道后就是正式入职员工了，GIS传统软件行业做WebGIS方向岗位有的也叫GIS软件开发工程师。</p>
<p>入职后，我被安排到了事业部；我心里认为是因为技术不行，被调部门了，不过我工作还是做WebGIS相关的开发工作，就觉得无所谓了。最后部门合并了，原来实习的部门合并到了事业部，最终都是一样的。</p>
<p>工作，入职就是做项目的，WebGIS项目开发，主要技术就是JavaScript/CSS/HTML，后端Java，数据库MySQL或者Oracle。这样学习方向就定的范围就更小了，先学好这些工作就轻松了。</p>
<p>工作的前两个月是比较困难的，记得当初和ZhangDK（一个同事）每天下班后都留在公司上晚自习，坚持了一两个月吧。慢慢的熟悉公司相关的技术，框架源码的阅读，项目做多了，也就熟悉了，待在公司里边做开发，做什么系统都可以了。</p>
<p>随着老员工的离职，我们就变成了老员工~</p>
<h2 id="忧患意识-前端开发工程师的蜕变"><a href="#忧患意识-前端开发工程师的蜕变" class="headerlink" title="忧患意识-前端开发工程师的蜕变"></a>忧患意识-前端开发工程师的蜕变</h2><p>做WebGIS开发工作，大部分是前端开发工作，然后自己就会关注前端领域的发展，发现互联网前端方向技术更替的很快，当时node.js、angularjs、前端自动化编程，grunt、gulp等技术流行开来，前端领域炙手可热，自己就时刻了解最新情况，然后再跟进学习技术。</p>
<p>我是从node.js下手开始的，原因是node.js能做后端开发，还是JavaScript语法，学会了自己就可以随意搭建网站或者一下demo应用，更好的学习前端开发。因为做开发的，前端后端你都得会，从前端到后端的交互等；当时因为Java技术不够深，其实使用Java搭建网站后台也是可以的，但是你要做很多工作，比如选择SSH框架，自己封装接口，写Controller等一套东西，学习Java后端这一套东西，花费的学习成本可不少。加上前端全家桶，你是没多少精力的。</p>
<p>node.js上手后，我就入门了Vue.js，angular.js等前端框架，通过gulp，webpack等工具构建环境，开发一些demo应用，了解框架的使用技术等，最后公司里边有项目用了angularjs1.x和有H5 app使用了ionic开发。我也是轻松上手的，当时顿时觉得受用很大。</p>
<p>然而前端技术更替没有停止，angular1.x的缺点导致Vue.js框架的流行开来，还有组件式编程的React的出现，React Native的出现等，带动了前端领域进军App，以及全端的方向发展。</p>
<p>去年我也学习了React，并且了解入门了React Native。发现前端能做的东西很多，只要你敢想象。</p>
<p>然而新公司使用了ng2开发web系统，nativescript开发app，两者对我来说都是全新的。我入职的时候花一周时间上手ng2，并且能指导其他新员工以及实习生做开发。这就是我前面积累的发挥。对于我熟悉使用ES6，以及学过TypeScript来说，ng2上手只需要一周时间，当然高级部分以及精通是需要花时间学习研究的。不过工作上，做系统，做功能，一般的就够了。如果你没有其他技术经验的积累，你可以去试试ng2上手的难度和实际~</p>
<p>我要说的是，前端技术在更替，并且会一直在变。如果你从事前端领域，你要保持一颗好奇接受新技术的心，也就是不停学习的心。当然，不要以为什么框架都懂了，你就牛逼了，最重要的还是基础，以及你从事方向的深入研究。框架就是工具，你学习使用和精通使用工具后，生产工具的原理，如何生产工具你也是要去研究掌握的。因为更多的工具会更具市场需求生产出来，作为程序猿，要想未来不被淘汰，你要作为工具生产者或者是了解工具生产过程的人，而不是仅仅是一个每年都可以用毕业生更换的螺丝钉！！！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后说一下为什么我离开了GIS行业。</p>
<p>我是从事WebGIS开发方向，也就是使用Java编程语言（不精通），然后用前端技术做GIS相关的Web开发，简单的地图js库调用实现一些功能，这样的工作不能长久，因为没机会接触核心的，比如ArcGIS JavaScript API这种库的开发才是方向。不然你的工作随时可以被未来毕业生替代。</p>
<p>另一个方面，比较尴尬的是GIS行业的前端技术和互联网前端相差如天地。并且开发的系统不注重体验，因为都是给当官的人用的，你看啊，是政府相关的网站哪个不是又丑又难用的。优化前端的体验等用到的技术也是要学习的，如果你学习了没机会用，那你可能就考虑一下转行了。</p>
<p>现实一点，个人认为传统软件行业的公司前景不好或者寿命不长，我不能把自己的技术和前途作为筹码赌博。并且薪酬和互联网差别会越来越大，也是因为技术栈差距越来越大。</p>
<p>未来前端会占领App市场~也就是前端开发工程师你要懂PC端，还要懂App端的开发，目前很多公司已经有要求了。现在我的工作就是，使用NativeScript开发App，一般作为前端的组长带领前端团队开发Web端的项目。我也是学习的过程，工作的过程也是学习的过程，那你就会有所成长！</p>
<p>更多经验分享欢迎围观本人 Live<a href="https:## www.zhihu.com/lives/844909623906549760" target="_blank" rel="external">「从 giser 到前端开发经理之路」</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文首发于个人博客与个人微信公众号&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;更多经验分享欢迎围观本人 Live&lt;a href=&quot;https:## www.zhihu.com/lives/844909623906549760&quot;&gt;「从 giser 到前端开发经理之路」&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;我与GIS的结缘&quot;&gt;&lt;a href=&quot;#我与GIS的结缘&quot; class=&quot;headerlink&quot; title=&quot;我与GIS的结缘&quot;&gt;&lt;/a&gt;我与GIS的结缘&lt;/h2&gt;&lt;p&gt;2010年，我考上了西北农林科技大学，原第一志愿是机械相关的专业，服从调剂后，就被调配到了资环学院的地理信息系统专业，当时我是完全不知道地理信息系统是干什么的，更不清楚毕业能做什么工作，查了百科，专业的介绍更加懵逼了。&lt;/p&gt;
&lt;p&gt;大一也没学什么专业课，尴尬的是回家，亲朋好友问所学专业，只能说是画地图的，后来学习遥感后，就说做遥感、GPS导航的。然后村里的老大爷听到就纷纷点头说，高科技啊，有前途！&lt;/p&gt;
&lt;p&gt;一直到上大三，我才真正知道GIS毕业能做什么工作，大概有这么个方向：GIS相关软件使用相关岗位（包括数据处理，技术支持）、销售岗位（卖软件或者其他影像销售）、遥感相关从业技术人员（国内只有国企、事业单位）、测绘相关、IT方向；&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://blog.giscafer.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="总结" scheme="http://blog.giscafer.com/categories/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="giscafer" scheme="http://blog.giscafer.com/tags/giscafer/"/>
    
  </entry>
  
  <entry>
    <title>angular实现IM聊天图片发送</title>
    <link href="http://blog.giscafer.com/2017/05/07/ng-im-sending-picture/"/>
    <id>http://blog.giscafer.com/2017/05/07/ng-im-sending-picture/</id>
    <published>2017-05-07T03:49:39.000Z</published>
    <updated>2017-05-07T06:08:03.771Z</updated>
    
    <content type="html"><![CDATA[<p>IM聊天图片发送有两种方式</p>
<ul>
<li>截图粘贴到信息框后点击发送</li>
<li>选择本地图片发送</li>
</ul>
<p>图片剪切粘贴，使用QQ或者其他平台的截图功能，截图后粘贴<code>Ctrl+V</code>，这个过程需要获取粘贴板上的图片数据，并在页面中展示，也就是将图片数据创建一个img元素，就可以显示出来了。</p>
<a id="more"></a>
<h2 id="从粘贴面板中获取图片数据"><a href="#从粘贴面板中获取图片数据" class="headerlink" title="从粘贴面板中获取图片数据"></a>从粘贴面板中获取图片数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 黏贴发送图片</div><div class="line"> * @param e</div><div class="line"> */</div><div class="line">pasteData(e) &#123;</div><div class="line">    e.preventDefault();</div><div class="line">    <span class="keyword">let</span> clipboardData = e.clipboardData;</div><div class="line">    <span class="keyword">if</span> (clipboardData) &#123; <span class="comment">//如果支持这个</span></div><div class="line">        <span class="keyword">let</span> items = clipboardData.items; <span class="comment">//获取黏贴里的对象</span></div><div class="line">        <span class="keyword">if</span> (!items) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> item;</div><div class="line">        <span class="keyword">let</span> types = clipboardData.types || [];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = types.length; i&lt; len; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (types[i] === <span class="string">'Files'</span>) &#123;</div><div class="line">                item = items[i];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (item &amp;&amp; item.kind === <span class="string">'file'</span> &amp;&amp; item.type.match(<span class="regexp">/^image\//i</span>)) &#123;</div><div class="line">            imgReader(item);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">imgReader</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">      <span class="keyword">let</span> $messageBox=$(<span class="string">'#message-boxID'</span>);</div><div class="line">        <span class="keyword">let</span> file = obj.getAsFile(),</div><div class="line">            reader = <span class="keyword">new</span> FileReader();</div><div class="line">        <span class="comment">// 读取文件</span></div><div class="line">        reader.readAsDataURL(file);</div><div class="line">        reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">            <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</div><div class="line">            img.src = e.target[<span class="string">'result'</span>];</div><div class="line">            img.className = <span class="string">'chatImg'</span>;</div><div class="line"></div><div class="line">            $messageBox.append(img);</div><div class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                $messageBox.scrollTop($messageBox[<span class="number">0</span>].scrollHeight);</div><div class="line">            &#125;, <span class="number">0</span>)</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="本地图片选择"><a href="#本地图片选择" class="headerlink" title="本地图片选择"></a>本地图片选择</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"upImg"</span>  <span class="attr">name</span>=<span class="string">"fileTrans"</span> <span class="attr">type</span>=<span class="string">"file"</span> (<span class="attr">change</span>)=<span class="string">"onFileSelect($event)"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 选择图片</div><div class="line"> * @param event</div><div class="line"> */</div><div class="line">files:any[]=[];</div><div class="line">onFileSelect(event) &#123;</div><div class="line">    <span class="keyword">this</span>.files=[];</div><div class="line">    <span class="keyword">let</span> files = event.dataTransfer ? event.dataTransfer.files : event.target.files;</div><div class="line">    <span class="keyword">let</span> file;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</div><div class="line">        file = files[i];</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isImage(file)) &#123;</div><div class="line">            file.objectURL = <span class="keyword">this</span>.sanitizer.bypassSecurityTrustUrl((<span class="built_in">window</span>.URL.createObjectURL(files[i])));</div><div class="line">            <span class="keyword">this</span>.files.push(files[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> fileUrl = file.objectURL.changingThisBreaksApplicationSecurity;</div><div class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</div><div class="line">    img.src = fileUrl;</div><div class="line">    img.className = <span class="string">'chatImg'</span>;</div><div class="line"></div><div class="line">    $(<span class="string">'#message-boxID'</span>).append(img);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="图片上传服务器"><a href="#图片上传服务器" class="headerlink" title="图片上传服务器"></a>图片上传服务器</h2><p>前端angular上传图片到服务器，必然是ajax请求的方式，将图片数据转成二进制流传给后端了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">url:string=<span class="string">"http://localhost:8080/upload"</span>;</div><div class="line">progress:number=<span class="number">0</span>;<span class="comment">//进度</span></div><div class="line"></div><div class="line">uploadPic(formData):<span class="built_in">Promise</span>&lt;any&gt; &#123;</div><div class="line">      <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest(),</div><div class="line">      </div><div class="line">     </div><div class="line">      <span class="comment">//封装xhr请求</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Pormise(resolve,reject)&#123;</div><div class="line">          xhr.upload.addEventListener(<span class="string">'progress'</span>, (e: ProgressEvent) =&gt; &#123;</div><div class="line">          <span class="keyword">if</span>(e.lengthComputable) &#123;</div><div class="line">            <span class="keyword">this</span>.progress = <span class="built_in">Math</span>.round((e.loaded * <span class="number">100</span>) / e.total);</div><div class="line">          &#125;</div><div class="line">          &#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line">          xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">              <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>) &#123;</div><div class="line">                  <span class="keyword">this</span>.progress = <span class="number">0</span>;</div><div class="line">                  </div><div class="line">                  <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)</div><div class="line">                      resolve(&#123;<span class="attr">xhr</span>: xhr, <span class="attr">files</span>: <span class="keyword">this</span>.files&#125;);</div><div class="line">                  <span class="keyword">else</span></div><div class="line">                      reject(&#123;<span class="attr">xhr</span>: xhr, <span class="attr">files</span>: <span class="keyword">this</span>.files&#125;);</div><div class="line">              &#125;</div><div class="line">          &#125;;</div><div class="line">          </div><div class="line">          xhr.open(<span class="string">'POST'</span>, <span class="keyword">this</span>.url, <span class="literal">true</span>);</div><div class="line">          <span class="comment">//jwt后端验证，设置请求头部信息，解决跨域</span></div><div class="line">          xhr.setRequestHeader(<span class="string">"Authorization"</span>, <span class="string">"Basic "</span> + localStorage.getItem(<span class="string">'jwt'</span>));</div><div class="line">          </div><div class="line">          xhr.send(formData);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>将以上方法写到一个<code>upload-file.servie.ts</code>中。然后其他地方就可以使用<code>uploadFileService.uploadPic()</code>方法调用了。</p>
<p>这里后端代码忽略，后端Java或者nodejs都很简单，接收文件二进制流保存，或者是上传到百度云与阿里云。</p>
<h2 id="信息发送按钮处理"><a href="#信息发送按钮处理" class="headerlink" title="信息发送按钮处理"></a>信息发送按钮处理</h2><p>发送信息处理，需要处理好文本信息和图片信息两种。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * dataURL to blob, ref to https://gist.github.com/fupslot/5015897</div><div class="line"> * @param dataURI</div><div class="line"> * @returns &#123;Blob&#125;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURItoBlob</span>(<span class="params">dataURI</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> byteString = atob(dataURI.split(<span class="string">','</span>)[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">var</span> mimeString = dataURI.split(<span class="string">','</span>)[<span class="number">0</span>].split(<span class="string">':'</span>)[<span class="number">1</span>].split(<span class="string">';'</span>)[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(byteString.length);</div><div class="line">    <span class="keyword">var</span> ia = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(ab);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; byteString.length; i++) &#123;</div><div class="line">        ia[i] = byteString.charCodeAt(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blob([ab], &#123;<span class="attr">type</span>: mimeString&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">     * 发送消息</div><div class="line">     * @param taskValue</div><div class="line">     */</div><div class="line">    sendMessage() &#123;</div><div class="line">        <span class="keyword">let</span> dateTime = <span class="keyword">this</span>.dateFromat.FormatDate(<span class="keyword">new</span> <span class="built_in">Date</span>());</div><div class="line">        <span class="keyword">let</span> value = $(<span class="string">'#message-boxID'</span>).html();</div><div class="line">        <span class="keyword">let</span> isImg = value.includes(<span class="string">'&lt;img'</span>);</div><div class="line">        <span class="comment">//如果是图片信息</span></div><div class="line">        <span class="keyword">if</span> (isImg) &#123;</div><div class="line">            <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</div><div class="line">            <span class="keyword">let</span> dataURL=<span class="string">""</span>;</div><div class="line">            <span class="keyword">let</span> src=$(value)[<span class="number">0</span>].src;</div><div class="line">            <span class="comment">//图片截图粘贴</span></div><div class="line">            <span class="keyword">if</span>(src.includes(<span class="string">'data:images'</span>))&#123;</div><div class="line">                dataURL=src;</div><div class="line">                <span class="keyword">let</span> blob = dataURItoBlob(dataURL);</div><div class="line">                formData.append(<span class="string">'file'</span>, blob);</div><div class="line">            </div><div class="line">            <span class="comment">//图片本地选择</span></div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(src.includes(<span class="string">'blob:http'</span>))&#123;</div><div class="line">                 <span class="comment">//files是图片选择时保存的图片文件对象，见onFileSelect方法</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.files.length; i++) &#123;</div><div class="line">                    formData.append(<span class="string">'file'</span>, <span class="keyword">this</span>.files[i], <span class="keyword">this</span>.files[i].name);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//调用上传图片方法</span></div><div class="line">            <span class="keyword">this</span>.uploadFileService.uploadPic(formData).then(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</div><div class="line">                <span class="comment">//上传成功，do something</span></div><div class="line">                <span class="built_in">console</span>.log(result);</div><div class="line">                </div><div class="line">            &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'图片上传失败'</span>+err);</div><div class="line">            &#125;)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//非图片信息，文本发送</span></div><div class="line">            <span class="comment">//this.submitMessage(value);</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>&lt;完&gt;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IM聊天图片发送有两种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;截图粘贴到信息框后点击发送&lt;/li&gt;
&lt;li&gt;选择本地图片发送&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;图片剪切粘贴，使用QQ或者其他平台的截图功能，截图后粘贴&lt;code&gt;Ctrl+V&lt;/code&gt;，这个过程需要获取粘贴板上的图片数据，并在页面中展示，也就是将图片数据创建一个img元素，就可以显示出来了。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Angular" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/Angular/"/>
    
    
      <category term="Angular" scheme="http://blog.giscafer.com/tags/Angular/"/>
    
      <category term="im" scheme="http://blog.giscafer.com/tags/im/"/>
    
  </entry>
  
  <entry>
    <title>Cafe主题v1.0发布</title>
    <link href="http://blog.giscafer.com/2017/04/16/cafe-release-1/"/>
    <id>http://blog.giscafer.com/2017/04/16/cafe-release-1/</id>
    <published>2017-04-15T16:44:26.000Z</published>
    <updated>2017-04-15T16:52:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>cafe主题发布v1.0版本，更新内容有：</p>
<ul>
<li><p>添加网易云跟帖插件系统  （<a href="http://cafe.giscafer.com/2017/04/14/gentie-test/" target="_blank" rel="external">查看使用方式</a>）</p>
</li>
<li><p>添加 mathjax(latex公式) 支持 （<a href="http://cafe.giscafer.com/2017/04/15/mathjax-test/" target="_blank" rel="external">查看文章演示</a>）</p>
</li>
<li><p>添加友情链接widget</p>
</li>
<li><p>修复已经样式问题</p>
</li>
</ul>
<p>github:<a href="https://github.com/giscafer/hexo-theme-cafe" target="_blank" rel="external">https://github.com/giscafer/hexo-theme-cafe</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cafe主题发布v1.0版本，更新内容有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;添加网易云跟帖插件系统  （&lt;a href=&quot;http://cafe.giscafer.com/2017/04/14/gentie-test/&quot; target=&quot;_blank&quot; rel=&quot;exter
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Hexo" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/Hexo/"/>
    
    
      <category term="cafe" scheme="http://blog.giscafer.com/tags/cafe/"/>
    
  </entry>
  
  <entry>
    <title>React搭建百度前端技术学院习题演示SPA</title>
    <link href="http://blog.giscafer.com/2017/03/05/ife-course-demo/"/>
    <id>http://blog.giscafer.com/2017/03/05/ife-course-demo/</id>
    <published>2017-03-05T13:34:53.000Z</published>
    <updated>2017-03-05T14:00:02.803Z</updated>
    
    <content type="html"><![CDATA[<p>百度前端技术学院提供了很多前端编程练习题，大概看了一些，觉得对于初学者是有很大帮助的，非初学者也可以学习巩固一下基础。毕竟书上的练习题可能比较乏味。</p>
<p>在离职时间内，时间充裕的时候搭建了该SPA，无聊的时候刷刷题。访问地址：<a href="http://ife.giscafer.com" target="_blank" rel="external">http://ife.giscafer.com</a></p>
<p><img src="/static/img/ife-course-demo.jpg" alt="PC端预览"></p>
<p>Github源码：<a href="https://github.com/giscafer/ife-course-demo" target="_blank" rel="external">https://github.com/giscafer/ife-course-demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;百度前端技术学院提供了很多前端编程练习题，大概看了一些，觉得对于初学者是有很大帮助的，非初学者也可以学习巩固一下基础。毕竟书上的练习题可能比较乏味。&lt;/p&gt;
&lt;p&gt;在离职时间内，时间充裕的时候搭建了该SPA，无聊的时候刷刷题。访问地址：&lt;a href=&quot;http://ife
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="项目&amp;Demo" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE-Demo/"/>
    
    
      <category term="ife" scheme="http://blog.giscafer.com/tags/ife/"/>
    
      <category term="前端习题" scheme="http://blog.giscafer.com/tags/%E5%89%8D%E7%AB%AF%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>react-ponitor</title>
    <link href="http://blog.giscafer.com/2017/02/04/react-ponitor/"/>
    <id>http://blog.giscafer.com/2017/02/04/react-ponitor/</id>
    <published>2017-02-04T10:35:11.000Z</published>
    <updated>2017-03-05T14:00:07.196Z</updated>
    
    <content type="html"><![CDATA[<p>近期学习react，故使用 React 重写原先使用 vue.js v1.x开发的 <a href="https://github.com/giscafer/Ponitor" target="_blank" rel="external">Ponitor</a></p>
<p><img src="https://raw.githubusercontent.com/giscafer/react-ponitor/master/public/screenshot.png" alt="screenshot.png"></p>
<p>Github 源码：<a href="https://github.com/giscafer/react-ponitor" target="_blank" rel="external">https://github.com/giscafer/react-ponitor</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期学习react，故使用 React 重写原先使用 vue.js v1.x开发的 &lt;a href=&quot;https://github.com/giscafer/Ponitor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ponitor&lt;/a&gt;&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="项目&amp;Demo" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE-Demo/"/>
    
    
      <category term="React" scheme="http://blog.giscafer.com/tags/React/"/>
    
      <category term="redux" scheme="http://blog.giscafer.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>React 与 Redux 实践 —— 城市筛选面板</title>
    <link href="http://blog.giscafer.com/2017/01/20/react-redux-cityfilter-demo/"/>
    <id>http://blog.giscafer.com/2017/01/20/react-redux-cityfilter-demo/</id>
    <published>2017-01-20T10:51:20.000Z</published>
    <updated>2017-06-01T15:34:52.310Z</updated>
    
    <content type="html"><![CDATA[<p>Redux 是 JavaScript <code>状态容器</code>，提供<code>可预测化</code>的状态管理。Redux的出现，可以让你构建一致化的应用，运行与不同的环境。</p>
<p>要点</p>
<ul>
<li>应用中所有的 state 都以一个对象树的形式存储在一个单一的 store 中；</li>
<li>唯一改变 store 的办法是触发 action，一个描述发生什么的对象；</li>
<li>为了描述 action 如何改变 state 树，你需要编写 reducers；  </li>
<li>为了UI组件 components 状态无关，你需要编写 containers 来负责管理数据和业务逻辑。</li>
</ul>
<p>所以，关于组件部分，明智的做法是在最外层上使用 Redux ，然后通过 <code>Props</code> 方式传值给内部子组件，使得components UI组件仅仅是<code>pure render</code>（纯展示）</p>
<a id="more"></a>
<p><strong>containers 与 components 区别对比</strong></p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">containers（容器组件）</th>
<th style="text-align:center">components（UI组件）</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Location</strong></td>
<td style="text-align:center">最顶层，路由处理</td>
<td style="text-align:center">中间和子组件</td>
</tr>
<tr>
<td><strong>与Redux联系</strong></td>
<td style="text-align:center">是</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td><strong>读取数据</strong></td>
<td style="text-align:center">从 Redux 获取 state</td>
<td style="text-align:center">从 props 获取数据</td>
</tr>
<tr>
<td><strong>修改数据</strong></td>
<td style="text-align:center">从 Redux 派发 action</td>
<td style="text-align:center">从 props 调用回调函数</td>
</tr>
</tbody>
</table>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>通过一个城市筛选面板来理解 React + Redux 的使用</p>
<p><img src="/static/img/react-redux-cityfilter-demo.gif" alt=""></p>
<p>示例demo：<a href="http://blog.giscafer.com/react-demo-list/#/citypanel">http://blog.giscafer.com/react-demo-list/#/citypanel</a></p>
<p>源码：<a href="https://github.com/giscafer/react-demo-list" target="_blank" rel="external">https://github.com/giscafer/react-demo-list</a></p>
<p><strong>编写 React 应用的时候，会有一个大致的开发步骤</strong>：</p>
<ul>
<li>构建应用状态树 state 结构</li>
<li>编写 action （描述已发生事件的普通对象，所有修改 state 的操作都必须通过触发action）</li>
<li>编写 reducers （描述 action 如何改变 state tree）</li>
<li>编写 UI组件 components （纯组件，无状态，所有参数通过Props传，可复用性）</li>
<li>编写 容器组件 containers （用来负责管理数据和业务逻辑，react-redux 链接components）</li>
<li>通过 createStore 创建store，通过 Provider 包装根组件</li>
</ul>
<h2 id="Action-创建常量和函数"><a href="#Action-创建常量和函数" class="headerlink" title="Action 创建常量和函数"></a>Action 创建常量和函数</h2><p>定好<code>state tree</code>后，编写actions</p>
<p><code>actions.jsx</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * citypanel actions</div><div class="line"> */</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_VISIBILITY_FILTER = <span class="string">'SET_VISIBILITY_FILTER'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setVisibilityFilter</span>(<span class="params">filter</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: SET_VISIBILITY_FILTER, filter &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Reducers"><a href="#Reducers" class="headerlink" title="Reducers"></a>Reducers</h2><p>当应用很大时，可以将它拆成多个小的 reducers，分别独立地操作 state tree 的不同部分，因为 reducer 只是函数，你可以控制它们被调用的顺序，传入附加数据，甚至编写可复用的 reducer 来处理一些通用任务，如分页器</p>
<p><code>reducer 和 action 是好基友</code></p>
<p><code>./reducers/cityList.jsx</code> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; SET_VISIBILITY_FILTER &#125; <span class="keyword">from</span> <span class="string">'../../actions/citypanel/actions'</span>;</div><div class="line"><span class="keyword">import</span> &#123; cityData &#125; <span class="keyword">from</span> <span class="string">'./cityData.js'</span>;</div><div class="line"><span class="keyword">const</span> initialState = cityData.filter(<span class="function"><span class="params">item</span> =&gt;</span> item[<span class="string">'citynum'</span>])</div><div class="line"><span class="built_in">console</span>.log(initialState)</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">cityList</span>(<span class="params">state = initialState, action</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> SET_VISIBILITY_FILTER:</div><div class="line">            <span class="keyword">return</span> cityFilter(action.filter)</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> state</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cityFilter</span>(<span class="params">filter</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> cityData.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (filter === <span class="string">'特大'</span> || !filter) &#123;</div><div class="line">            <span class="keyword">if</span> (item[<span class="string">'citynum'</span>]) &#123;</div><div class="line">                <span class="keyword">return</span> item;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item[<span class="string">'pinyin'</span>][<span class="number">0</span>].toLocaleUpperCase() === filter &amp;&amp; !item[<span class="string">'citynum'</span>]) &#123;</div><div class="line">            <span class="keyword">return</span> item;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(filter)</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>./reducers/index.jsx</code> 组合所有reducers （多个的时候用）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="keyword">import</span> cityList <span class="keyword">from</span> <span class="string">'./cityList'</span></div><div class="line"></div><div class="line"><span class="comment">//使用redux的combineReducers方法将所有reducer打包起来</span></div><div class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123;</div><div class="line">    cityList</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer</div></pre></td></tr></table></figure>
<h2 id="UI组件components"><a href="#UI组件components" class="headerlink" title="UI组件components"></a>UI组件components</h2><p>宗旨就是<code>pure function</code></p>
<p><code>./components/cityList.jsx</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123;cityList = []&#125;) =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">'city-list'</span>&gt;</span></span></div><div class="line">            &#123;</div><div class="line">                cityList.map((city,index) =&gt; &#123;</div><div class="line">                    if(city)&#123;</div><div class="line">                        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">'left textCenter'</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">data-name</span>=<span class="string">&#123;city.name&#125;</span>&gt;</span>&#123;city.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>./components/letterFilter.jsx</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123;onFilterChange&#125;) =&gt; &#123;</div><div class="line">    <span class="comment">// let letterArr = new Array(26);</span></div><div class="line">    <span class="comment">// for (var i = 0; i &lt; 26; i++) &#123;</span></div><div class="line">    <span class="comment">//     letterArr[i]=String.fromCharCode((65 + i));</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line">    <span class="comment">// console.log(letterArr)</span></div><div class="line">    <span class="keyword">let</span> letterArr=[<span class="string">'特大'</span>,<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>];</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">'city-index'</span>&gt;</span></span></div><div class="line">            &#123;</div><div class="line">                letterArr.map((letter,i) =&gt; &#123;</div><div class="line">                    return <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">'left textCenter on_mouseover'</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123; onFilterChange(letter) &#125;&#125;&gt;&#123;letter&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>外层组件组合letterFilter与cityList子组件，<code>./components/index.jsx</code></p>
<p>//此处的函数参数cityList与setVisibilityFilter是由容器组件传输</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> LetterFilter <span class="keyword">from</span> <span class="string">'./letterFilter'</span>;</div><div class="line"><span class="keyword">import</span> CityList <span class="keyword">from</span> <span class="string">'./cityList'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'../../styles/citypanel/index.less'</span>;</div><div class="line"><span class="keyword">import</span> Nav <span class="keyword">from</span> <span class="string">'../nav/Nav'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123;cityList = [], setVisibilityFilter&#125;) =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        &lt;div className='city-panel'&gt;</div><div class="line">             &lt;Nav /&gt;</div><div class="line">            &lt;CityList cityList=&#123;cityList&#125; /&gt;</div><div class="line">            &lt;LetterFilter onFilterChange=&#123;setVisibilityFilter&#125; /&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="容器组件containers"><a href="#容器组件containers" class="headerlink" title="容器组件containers"></a>容器组件containers</h2><p>主要是通过<code>react-redux</code>中间件提供的<code>connect</code>方法来链接<code>containers</code>与<code>components</code>，而<code>connect</code> 方法提供了两个方法 <code>mapStateToProps</code> 与 <code>mapDispatchToProps</code>，它们定义了 UI 组件的业务逻辑。前者负责输入逻辑。<br><code>mapStateToProps</code>将 state 映射到 UI 组件的参数（Props），<code>mapDispatchToProps</code>负责输出逻辑，即将用户对 UI 组件的操作映射成 Action，也可以通过<code>bindActionCreators</code>方法将<code>action</code>的所有方法绑定到props上。</p>
<p><code>./containers/App.jsx</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="keyword">import</span> cityPanelIndex <span class="keyword">from</span> <span class="string">'../../components/citypanel/index'</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ctiyActions <span class="keyword">from</span> <span class="string">'../../actions/citypanel/actions'</span></div><div class="line"></div><div class="line"><span class="comment">//将state.cityList绑定到props的cityList</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">cityList</span>:state.cityList</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//将action的所有方法绑定到props上</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> bindActionCreators(ctiyActions,dispatch);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps,mapDispatchToProps)(cityPanelIndex)</div></pre></td></tr></table></figure>
<h2 id="注册store"><a href="#注册store" class="headerlink" title="注册store"></a>注册store</h2><p>将 state 和 action 交给 redux 来管理</p>
<p><code>./stores/createStore.jsx</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></div><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'../reducers/citypanel'</span></div><div class="line"><span class="comment">//applyMiddleware来自redux可以包装 store 的 dispatch</span></div><div class="line"><span class="comment">//thunk作用是使action创建函数可以返回一个function代替一个action对象</span></div><div class="line"><span class="keyword">const</span> createStoreWithMiddleware = applyMiddleware(</div><div class="line">  thunk</div><div class="line">)(createStore)</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">configureStore</span>(<span class="params">initialState</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> store = createStoreWithMiddleware(reducer, initialState)</div><div class="line">  <span class="comment">//热替换选项</span></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</div><div class="line">    <span class="comment">// Enable Webpack hot module replacement for reducers</span></div><div class="line">    <span class="built_in">module</span>.hot.accept(<span class="string">'../reducers/citypanel'</span>, () =&gt; &#123;</div><div class="line">      <span class="keyword">const</span> nextReducer = <span class="built_in">require</span>(<span class="string">'../reducers/citypanel'</span>)</div><div class="line">      store.replaceReducer(nextReducer)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> store</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="App主文件入口"><a href="#App主文件入口" class="headerlink" title="App主文件入口"></a>App主文件入口</h2><p>最终Provider包装主组件（containers）</p>
<p><code>Main.jsx</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * citypanel主入口</div><div class="line"> */</div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'../../containers/citypanel/App'</span></div><div class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">'../../stores/configureStore'</span></div><div class="line"><span class="keyword">const</span> store = configureStore()</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">App</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个react + redux 应用完成了</p>
<p>演示：<a href="http://blog.giscafer.com/react-demo-list/#/citypanel">http://blog.giscafer.com/react-demo-list/#/citypanel</a></p>
<p>源码：<a href="https://github.com/giscafer/react-demo-list" target="_blank" rel="external">https://github.com/giscafer/react-demo-list</a></p>
<p>（完）</p>
<hr>
<p><em>参考链接</em></p>
<ul>
<li><a href="http://www.jianshu.com/p/a83a99f68b5d" target="_blank" rel="external">http://www.jianshu.com/p/a83a99f68b5d</a></li>
<li><a href="https://lewis617.github.io/2016/01/19/r2-counter/" target="_blank" rel="external">https://lewis617.github.io/2016/01/19/r2-counter/</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redux 是 JavaScript &lt;code&gt;状态容器&lt;/code&gt;，提供&lt;code&gt;可预测化&lt;/code&gt;的状态管理。Redux的出现，可以让你构建一致化的应用，运行与不同的环境。&lt;/p&gt;
&lt;p&gt;要点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用中所有的 state 都以一个对象树的形式存储在一个单一的 store 中；&lt;/li&gt;
&lt;li&gt;唯一改变 store 的办法是触发 action，一个描述发生什么的对象；&lt;/li&gt;
&lt;li&gt;为了描述 action 如何改变 state 树，你需要编写 reducers；  &lt;/li&gt;
&lt;li&gt;为了UI组件 components 状态无关，你需要编写 containers 来负责管理数据和业务逻辑。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，关于组件部分，明智的做法是在最外层上使用 Redux ，然后通过 &lt;code&gt;Props&lt;/code&gt; 方式传值给内部子组件，使得components UI组件仅仅是&lt;code&gt;pure render&lt;/code&gt;（纯展示）&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="React" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/React/"/>
    
    
      <category term="React" scheme="http://blog.giscafer.com/tags/React/"/>
    
      <category term="redux" scheme="http://blog.giscafer.com/tags/redux/"/>
    
      <category term="react-redux" scheme="http://blog.giscafer.com/tags/react-redux/"/>
    
  </entry>
  
  <entry>
    <title>1.Two Sum</title>
    <link href="http://blog.giscafer.com/2017/01/13/leetcode-two-sum/"/>
    <id>http://blog.giscafer.com/2017/01/13/leetcode-two-sum/</id>
    <published>2017-01-13T12:24:00.000Z</published>
    <updated>2017-01-13T13:04:29.249Z</updated>
    
    <content type="html"><![CDATA[<p><em>原题地址：<a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="external">https://leetcode.com/problems/two-sum/</a></em></p>
<blockquote>
<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution.</p>
<p>Example:<br>Given nums = [2, 7, 11, 15], target = 9,</p>
<p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p>
</blockquote>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>正常两次循环，循环次数可能多，只要数组不是很大，效率还是很高的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;number[]&#125; nums</div><div class="line"> * @param &#123;number&#125; target</div><div class="line"> * @return &#123;number[]&#125;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.time(<span class="string">'twoSum'</span>)</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line"></div><div class="line">    	<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; nums.length&amp;&amp; i!=j; j++) &#123;</div><div class="line">    		<span class="keyword">if</span>(nums[j]+nums[i]===target)&#123;</div><div class="line">    			<span class="built_in">console</span>.timeEnd(<span class="string">'twoSum'</span>)</div><div class="line">    			<span class="keyword">var</span> result=[i,j].sort();</div><div class="line">    			<span class="keyword">return</span> result</div><div class="line">    		&#125;</div><div class="line">    	&#125;;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>边循环边使用对象存储</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> twoSum2 = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.time(<span class="string">'twoSum2'</span>)</div><div class="line">	<span class="keyword">var</span> obj=&#123;&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">    	<span class="keyword">if</span>(obj[nums[i+<span class="string">''</span>]]!==<span class="literal">null</span> &amp;&amp; obj[nums[i+<span class="string">''</span>]]!==<span class="literal">undefined</span>)&#123;</div><div class="line">    		<span class="keyword">var</span> result=[obj[nums[i]],i];</div><div class="line">    		 <span class="built_in">console</span>.timeEnd(<span class="string">'twoSum2'</span>)</div><div class="line">    		<span class="keyword">return</span> result;</div><div class="line">    	&#125;</div><div class="line">    	obj[target-nums[i]]=i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> result2=[];</div><div class="line">    <span class="keyword">return</span> result2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>测试结果，建议使用更大的数组测试，才会看到<code>twoSum2</code>方法效率高</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span>;</div><div class="line"><span class="comment">// var nums = [11, 15, 9,1,1,3,1,11, 15, 9,1,1,3,1,1,1,1,1,2,7,3], target = 9;</span></div><div class="line">twoSum(nums,target);</div><div class="line">twoSum2(nums,target);</div></pre></td></tr></table></figure>
<p>经测试，在小数组时，<code>twoSum方法</code>比<code>twoSum2</code>快很多，当数组变大时，<code>twoSum2</code>算法更快</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;原题地址：&lt;a href=&quot;https://leetcode.com/problems/two-sum/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/two-sum/&lt;/a&gt;&lt;/em&gt;&lt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="LeetCode" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/LeetCode/"/>
    
    
      <category term="leetcode" scheme="http://blog.giscafer.com/tags/leetcode/"/>
    
      <category term="算法" scheme="http://blog.giscafer.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何组件化开发WebGIS系统</title>
    <link href="http://blog.giscafer.com/2017/01/10/modularization-webgis/"/>
    <id>http://blog.giscafer.com/2017/01/10/modularization-webgis/</id>
    <published>2017-01-10T15:09:31.000Z</published>
    <updated>2017-01-12T14:04:06.379Z</updated>
    
    <content type="html"><![CDATA[<h3 id="啰嗦两句"><a href="#啰嗦两句" class="headerlink" title="啰嗦两句"></a>啰嗦两句</h3><p>前面聊过<a href="https://zhuanlan.zhihu.com/p/24780835?refer=viseye" target="_blank" rel="external">《探讨如何使用流行的前端技术开发WebGIS系统》</a>，本篇基于此继续介绍。</p>
<p><em>不用再讨论兼容IE6，7了，2017年，没人再用了。。。。哈哈哈</em></p>
<p>本人目前正业余开发一套框架，后端Java+前端Angular+个人封装的UI+个人封装的地图组件，东西很多，一个人搞，这是一个漫长的过程。这也是为什么最近再Github上如此活跃的原因，也因为最近一段时间没加过班。。。除了玩游戏就只能写代码了。。</p>
<p>=&gt;<a href="https://github.com/giscafer" target="_blank" rel="external">giscafer (Nickbing Lao)</a></p>
<h3 id="一、后端完善的Restful接口设计有利前端组件封装"><a href="#一、后端完善的Restful接口设计有利前端组件封装" class="headerlink" title="一、后端完善的Restful接口设计有利前端组件封装"></a>一、后端完善的Restful接口设计有利前端组件封装</h3><p>比如知乎的文章链接</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//</span>zhuanlan.zhihu.com<span class="regexp">/p/</span><span class="number">24780835</span></div></pre></td></tr></table></figure>
<p>可以看作一个GET请求，接口p，参数为24780835。这个接口可以查所有文章。</p>
<p>做WebGIS系统，后端框架，接口设计好用，能提升前端开发的效率，并且可以针对接口封装一些增删改查的组件，在angular里边，你可以封装成指令或者是controller，然后其他业务controller集成此类，就继承了该类的所有方法了。比如应用里边我封装了增删改查的操作，只要是单表的CRUD（增查改删），完全不需要写多余的CRUD代码，只需要修改一下HTML和传参。如下代码可以改为一个通用的父类Controller。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Test controller</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> popFormCtrl <span class="keyword">from</span> <span class="string">'./popForm.ctrl.js'</span>;</div><div class="line"><span class="keyword">import</span> popFormTemp <span class="keyword">from</span> <span class="string">'./popForm.html'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCtrl</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// dataServiceSrv, uiNotification为依赖注入服务，其中uiNotification为laoui封装ui控件</span></div><div class="line">    <span class="keyword">constructor</span>($scope, dataServiceSrv, uiNotification, $uiModal) &#123;</div><div class="line">        <span class="string">"ngInject"</span>;<span class="comment">//ES6写angularjs指定写法；作用是依赖注入上边的$scope, dataServiceSrv, uiNotification模块</span></div><div class="line">        <span class="keyword">this</span>._$scope = $scope;</div><div class="line">        <span class="keyword">this</span>._$uiModal = $uiModal;</div><div class="line">        <span class="keyword">this</span>._dataServiceSrv = dataServiceSrv;</div><div class="line">        <span class="keyword">this</span>._uiNotification = uiNotification;</div><div class="line">        <span class="keyword">this</span>.tableName = <span class="string">'student'</span>;</div><div class="line">        <span class="keyword">this</span>.title = <span class="string">"测试页"</span>;</div><div class="line">        <span class="comment">//查询标志位</span></div><div class="line">        <span class="keyword">this</span>.loading = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">this</span>.deleting = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">this</span>.isAllChecked = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">this</span>.table = [];</div><div class="line">        <span class="keyword">this</span>.query();</div><div class="line">        <span class="comment">//过滤器自定义方法 | filter:方法名称</span></div><div class="line">        <span class="keyword">this</span>.filterData=<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</div><div class="line">           <span class="keyword">return</span> item._deleted!=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//测试查询</span></div><div class="line">    query() &#123;</div><div class="line">        <span class="keyword">let</span> params = &#123;</div><div class="line">            <span class="string">"tableName"</span>: <span class="keyword">this</span>.tableName</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.loading = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">this</span>._dataServiceSrv.query(params).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">if</span> (data[<span class="string">'result'</span>].length) &#123;</div><div class="line">                <span class="keyword">this</span>.table = data[<span class="string">'result'</span>];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">this</span>._uiNotification.info(<span class="string">'无数据'</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;).finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">this</span>.loading = <span class="literal">false</span>;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//新增</span></div><div class="line">    add() &#123;</div><div class="line">        <span class="keyword">let</span> params = &#123;</div><div class="line">            <span class="attr">title</span>: <span class="string">'新增'</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.openPopForm(params);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//修改</span></div><div class="line">    update() &#123;</div><div class="line">        <span class="keyword">let</span> selectedRows = <span class="keyword">this</span>.getSelectedRows();</div><div class="line">        <span class="keyword">if</span> (selectedRows.length !== <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">let</span> options = &#123;</div><div class="line">                <span class="attr">message</span>: <span class="string">'请选中一条记录！'</span>, <span class="attr">positionX</span>: <span class="string">'center'</span>, <span class="attr">positionY</span>: <span class="string">'top'</span>, <span class="attr">delay</span>: <span class="number">2000</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._uiNotification.warning(options);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> params = &#123;</div><div class="line">            <span class="attr">title</span>: <span class="string">'修改'</span>,</div><div class="line">            <span class="attr">data</span>: selectedRows[<span class="number">0</span>]</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.openPopForm(params);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">delete</span>() &#123;</div><div class="line">        <span class="keyword">let</span> selectedRows = <span class="keyword">this</span>.getSelectedRows();</div><div class="line">        <span class="built_in">console</span>.log(selectedRows)</div><div class="line">        <span class="keyword">if</span> (!selectedRows.length) &#123;</div><div class="line">            <span class="keyword">let</span> options = &#123;</div><div class="line">                <span class="attr">message</span>: <span class="string">'请选中需要删除的记录！'</span>, <span class="attr">positionX</span>: <span class="string">'center'</span>, <span class="attr">positionY</span>: <span class="string">'top'</span>, <span class="attr">delay</span>: <span class="number">2000</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._uiNotification.warning(options);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> idArr = _.map(selectedRows, <span class="string">'id'</span>);</div><div class="line">        <span class="keyword">let</span> idValues = idArr.join(<span class="string">","</span>);</div><div class="line">        <span class="keyword">let</span> params = &#123;</div><div class="line">            <span class="attr">idValues</span>: idValues,</div><div class="line">            <span class="attr">tableName</span>: <span class="keyword">this</span>.tableName</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.deleting = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">this</span>._dataServiceSrv.deleteByKey(params).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">if</span> (res[<span class="string">'result'</span>]) &#123;</div><div class="line">                <span class="keyword">this</span>._uiNotification.success(<span class="string">'删除成功!'</span>);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> selectedRows)&#123;</div><div class="line">                    item._deleted=<span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                 <span class="keyword">this</span>._uiNotification.error(<span class="string">'删除失败!'</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;).finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">this</span>.deleting = <span class="literal">false</span>;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//通用弹窗</span></div><div class="line">    openPopForm(params = &#123;&#125;) &#123;</div><div class="line">        <span class="keyword">let</span> modalInstance = <span class="keyword">this</span>._$uiModal.open(&#123;</div><div class="line">            <span class="attr">templateUrl</span>: popFormTemp,</div><div class="line">            <span class="attr">controller</span>: popFormCtrl,</div><div class="line">            <span class="attr">controllerAs</span>: <span class="string">'popForm'</span>,</div><div class="line">            <span class="attr">size</span>: <span class="string">'lg'</span>,</div><div class="line">            <span class="attr">backdrop</span>: <span class="string">'static'</span>,</div><div class="line">            <span class="attr">resolve</span>: &#123;</div><div class="line">                <span class="attr">items</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> params;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    selectedAll() &#123;</div><div class="line">        <span class="keyword">this</span>.table.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</div><div class="line">            item.checked = <span class="keyword">this</span>.isAllChecked;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    check() &#123;</div><div class="line">        <span class="keyword">this</span>.isAllChecked = !_.some(<span class="keyword">this</span>.table, (item) =&gt; &#123;</div><div class="line">            <span class="keyword">return</span> !item.checked;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    selectByClick($event, item) &#123;</div><div class="line">        <span class="keyword">if</span> ($event.target.type !== <span class="string">'checkbox'</span>) &#123;</div><div class="line">            item.checked = !item.checked;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    getSelectedRows() &#123;</div><div class="line">        <span class="keyword">return</span> _.filter(<span class="keyword">this</span>.table, (item) =&gt; &#123;</div><div class="line">            <span class="keyword">return</span> item.checked === <span class="literal">true</span>;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/static/img/modularization-webgis1.png" alt=""></p>
<p><img src="/static/img/modularization-webgis2.png" alt=""></p>
<p>可以封装的内容出CRUD外，还包括一些限制控制，通知提示，表单验证等。</p>
<p>因为是angular框架，双向数据绑定，比传统的jqueryUI，easyUI这堆好用的多，这么一来简单的表单页面开发起来就不费任何力气，简单复制模板修改一下就OK。</p>
<h3 id="二、地图工具组件化"><a href="#二、地图工具组件化" class="headerlink" title="二、地图工具组件化"></a>二、地图工具组件化</h3><p>同理，地图工具组件化是必须的。（防转载标记，个人微信公众号：giscafer）</p>
<p>每个WebGIS系统都有这些一模一样的工具：<strong>全屏、放大、缩小、距离测量、面积测量、i键查询、坐标定位</strong> 等等，这些工具可以封装为无平台相关，也就是兼容所有地图js库，不管是ArcGIS API For JavaScript，还是OpenLayers 等，就比如我封装了一个叫 DMap 的地图库，里边大致结构如图：</p>
<p><img src="/static/img/modularization-webgis-dmap.png" alt="DMap库结构图"></p>
<p>在开发系统时，我选择了<code>Mapbox</code>作为地图js库，我在<code>dmap_config.js</code>文件中配置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">DMAP_JS_TYPE:<span class="string">"MAPBOX"</span></div></pre></td></tr></table></figure>
<p>这时候我可以自动构建打包一套Mapbox的js库（当然和原生库不一样，我封装了一些组件类，下边介绍）。同理我配置<code>DMAP_JS_TYPE:&quot;OL3&quot;</code>，就表示构建OL3组件库。</p>
<p>构建方式用<code>nodejs</code> + <code>webpack</code>等工具开发，类似 <a href="http://echarts.baidu.com/builder.html" target="_blank" rel="external">Echarts的构建方式</a> </p>
<p>然后我把组件库引入我开发的webgis系统。通过无平台相关（这表示和地图 js库无关）接口 Map 创建地图</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="string">"map"</span>, &#123;</div><div class="line">      <span class="comment">//配置</span></div><div class="line">       projection: <span class="string">"EPSG:900913"</span>,</div><div class="line">       <span class="attr">center</span>: [<span class="number">118.665397</span>, <span class="number">47.6569168</span>],</div><div class="line">       <span class="attr">zoom</span>: <span class="number">5</span></div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<p>另外，地图类型加载也可以封装成，通过配置地图类型比如，天地图OGC_WMTS，还是高德地图AMAP，demo《<a href="https://zhuanlan.zhihu.com/p/24780835?refer=viseye" target="_blank" rel="external">《探讨如何使用流行的前端技术开发WebGIS系统》</a> 就是配置的高德地图。这些地图加载同样封装成无平台相关。</p>
<p>以下是组件封装后使用demo截图：</p>
<p><img src="/static/img/modularization-webgis3.png" alt=""></p>
<p><img src="/static/img/modularization-webgis4.png" alt=""></p>
<p>最终，封装好后，以后做项目不用任何代码就可以构建一个webgis系统雏形出来，这个雏形系统带有基本的表单增删改查组件、全屏、放大、缩小、距离测量、面积测量、i键查询、坐标定位 等直接可用的地图组件。</p>
<h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>在WebGIS系统开发里边，有较多的表单业务，封装成组件开发是最方便的，也可以找网上的一些开源库做修改，定制成自己通用的才是最好用的。</p>
<p>已不从事gis行业，业余有外包机会或者兼职机会希望可以接一下，所以自己定制一个前端后端一整套框架，一方面学习，一方面积累技术。工作量很大，有时间一步一步慢慢来，并且业余还得学前端技术，React Native是下一个学习目标。</p>
<p>此外，框架设计的时候，考虑到不加载dmap地图库的时候，就是一个完全纯净的业务系统，可以用来做其他网站，比如企业站点、博客等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;啰嗦两句&quot;&gt;&lt;a href=&quot;#啰嗦两句&quot; class=&quot;headerlink&quot; title=&quot;啰嗦两句&quot;&gt;&lt;/a&gt;啰嗦两句&lt;/h3&gt;&lt;p&gt;前面聊过&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24780835?refer=viseye&quot;&gt;《探讨如何使用流行的前端技术开发WebGIS系统》&lt;/a&gt;，本篇基于此继续介绍。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;不用再讨论兼容IE6，7了，2017年，没人再用了。。。。哈哈哈&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;本人目前正业余开发一套框架，后端Java+前端Angular+个人封装的UI+个人封装的地图组件，东西很多，一个人搞，这是一个漫长的过程。这也是为什么最近再Github上如此活跃的原因，也因为最近一段时间没加过班。。。除了玩游戏就只能写代码了。。&lt;/p&gt;
&lt;p&gt;=&amp;gt;&lt;a href=&quot;https://github.com/giscafer&quot;&gt;giscafer (Nickbing Lao)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;一、后端完善的Restful接口设计有利前端组件封装&quot;&gt;&lt;a href=&quot;#一、后端完善的Restful接口设计有利前端组件封装&quot; class=&quot;headerlink&quot; title=&quot;一、后端完善的Restful接口设计有利前端组件封装&quot;&gt;&lt;/a&gt;一、后端完善的Restful接口设计有利前端组件封装&lt;/h3&gt;&lt;p&gt;比如知乎的文章链接&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;https:&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;zhuanlan.zhihu.com&lt;span class=&quot;regexp&quot;&gt;/p/&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;24780835&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看作一个GET请求，接口p，参数为24780835。这个接口可以查所有文章。&lt;/p&gt;
&lt;p&gt;做WebGIS系统，后端框架，接口设计好用，能提升前端开发的效率，并且可以针对接口封装一些增删改查的组件，在angular里边，你可以封装成指令或者是controller，然后其他业务controller集成此类，就继承了该类的所有方法了。比如应用里边我封装了增删改查的操作，只要是单表的CRUD（增查改删），完全不需要写多余的CRUD代码，只需要修改一下HTML和传参。如下代码可以改为一个通用的父类Controller。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="WebGIS" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/WebGIS/"/>
    
    
      <category term="WebGIS" scheme="http://blog.giscafer.com/tags/WebGIS/"/>
    
      <category term="gis" scheme="http://blog.giscafer.com/tags/gis/"/>
    
  </entry>
  
  <entry>
    <title>2016年末总结</title>
    <link href="http://blog.giscafer.com/2016/12/23/2016-year-end-summary/"/>
    <id>http://blog.giscafer.com/2016/12/23/2016-year-end-summary/</id>
    <published>2016-12-23T12:55:29.000Z</published>
    <updated>2017-03-05T14:09:13.666Z</updated>
    
    <content type="html"><![CDATA[<p>年底了，毕业两年半，也就是工作2年半了，times flying！！！</p>
<p>2016年，变化比较大的有三方面：工作地点由北京换到广州、脱离单身dog、gis行业转互联网（勉强算，都是做编程开发）。</p>
<a id="more"></a>
<h3 id="北京——广州"><a href="#北京——广州" class="headerlink" title="北京——广州"></a>北京——广州</h3><p><strong>北京</strong> 毕业北漂[求技]之旅，刚好两年，不长不短，体验到了北京大都市的生活节奏和人情风俗。总体来说都挺好的，除了雾霾天气比较严重外，其他给我的印象都不错；比如北京的街道很干净，公民总体素质高，社会基础设施，安全保障等，但最重要的还属于北京资源丰富。[资源]包括教育、医疗、科技等方方面面，it行业创业公司和氛围都很好，大型it公司也很多，竞争激烈，然而我并不能收益很多，两年时间是不够的。</p>
<p>我简单谈一下北漂的感受。实话说，程序猿北漂是相对轻松一点的吧，起薪高，尽管北京消费租房是昂贵的，还是能支付的起。比如租房2k月租左右的预付，能找到不错的，一个月2k的吃喝也足了（往低的说，你合租可以找1k~1.5k的房子，吃的话一天50也够了，一个月也就1.5k）。所以说，程序猿北漂是可以的，具体看个人了，可能还会买买衣服，电子产品这些，最后能不能省钱是一回事，反正我没剩钱。刚毕业，技术放在第一，养活自己就可以了。想在北京定居不容易，户口和房价是个问题。</p>
<p><strong>广州</strong>  刚来广州的时候，感受和北京差别比较大有地铁安检，只能说好简单的安检，也没西安安检严格；街道不够干净，垃圾比较多（非树叶）；租房，不好租，广州整租的很多，很少单独租主卧这种的，整租的话也贵，3k~4k 一个月（当然我指的是稍微交通便利的地带）。来广州我租了一间单间，1.7k的月租（北京我租的是次卧1.4k），附近吃喝和北京相比没差别，所以消费是和北京几乎等同的了，但是广州薪资和北京相比是有 20%~50% 浮动的差距的，房价慢慢涨到2W+每平米的水平。另外一个是交通不方便的问题，广州人多，交通运输量不够，还是地铁线设计有问题。早班时，地铁根本不能坐（广州3号线），挤地铁能活着不容易啊。</p>
<p>广州也有好的地方，好处就不说了。作为南方人，广州是最好的选择吧，起码离家近，能常回家看看！</p>
<h3 id="GIS——互联网前端"><a href="#GIS——互联网前端" class="headerlink" title="GIS——互联网前端"></a>GIS——互联网前端</h3><p>GIS专业毕业，我能选择的只有两个方向：一、数据处理工程师；二、软件开发工程师；因为我也只会这两个了。选开发那是肯定的，因为我一向不喜欢用软件搞数据，天天重复做着差不多的事情。开发也是天天写代码，但是写的代码不一样，思考的东西也不一样，发展方向也广阔，看的是技术能力和学习能力。</p>
<p>离开GIS行业是有原因的，在第一家公司里做GIS项目有10多个了，感受比较深的是，做这类政务系统，要求很低，安全性和稳定性以及易用性等。从前端来讲，优化是谈不上的，只要把功能做出来，没bug就OK。我觉得这不是前端所追求的，作为前端开发方向发展的我，选择离开是正确的。</p>
<h3 id="走着并追赶在前端的潮流之上"><a href="#走着并追赶在前端的潮流之上" class="headerlink" title="走着并追赶在前端的潮流之上"></a>走着并追赶在前端的潮流之上</h3><p>这几年，前端很火，变化的也多。前些天，一些大牛又在微博撕X，辩论XX技术好不好，有没有意义。作为前端小菜，我觉得新推出的技术、框架是要学习了解一下的，不管用不用上，学习了解一下没啥大不了，只有学习才能正确体验到框架是否真正好用，适用什么场景。实际上，有几年工作经验的程序猿，学一个框架，也就是一个周末而已就差不多了解其使用、适用场景了，就如入门一门新编程语言，可能也只需要一两周的时间。所以在前端混的，有选择的学习一下一些新技术是必要的。在前端潮流中享受与受伤吧~~o(╯□╰)o，听说2017年，新版webkit内核浏览器将支持模块化js，也就是commonjs，AMD这些直接支持了，再过几年淘汰老版本浏览器后就不需要编译了。。一切都在变化之中，或者已经在变化的路上！</p>
<p>这一年，做了很多小应用和demo，目前在用Angular封装一套前端ui框架，后端用JFinal封装一套接口服务，目的是学习和方便以后快速定制开发系统使用。想拥有自己的框架或能拿出手的东西，有时间和机会也接一下小项目、网站做等。</p>
<p>如果你的项目有意思想找人一起开发维护，或者纯技术交流学习，我在这Github：<a href="https://github.com/giscafer" target="_blank" rel="external">giscafer</a></p>
<p>以下是敲击记录（<em>我觉得github日历上满满的绿的用户，多数是前端开发方向</em>）</p>
<p><img src="/static/img/2016-github.png" alt="2016年Github提交记录"></p>
<p>2017年继续有计划地学习，计划开发一个上线运营的App，技术用<code>React Native</code>还是<code>Angualr Ionic2</code>待定，内容定位暂定为GIS学习方向。有兴趣的同学可以一起玩~</p>
<p>最后引入 [转自微博@tombkeeper]的话来总结：</p>
<p><strong>从事任何技术研究，不知道该干什么的时候，就问自己四个问题</strong></p>
<pre><code>- 这个方向上最新进展是什么？ 都知道吗？
- 这个方向上最著名的专家有哪些？他们的研究都看过吗？
- 这个方向上最著名的技术社区有哪些？精华帖都看过一遍吗？
- 这个方向上最重要的文章、工具有哪些？文章都看过吗？工具都分析过吗？
- 你有对象了吗？（针对程序猿）
</code></pre><h3 id="脱离单身dog"><a href="#脱离单身dog" class="headerlink" title="脱离单身dog"></a>脱离单身dog</h3><p>现在终于可以专心啪啪啪~敲着键盘，宅着写代码了。。。女票说想学测试，正在指导学习的路上，学不成也无所谓，能更好的了解计算机和互联网，不会那么电脑文盲，但也可能不小心入坑了呢。。。</p>
<h3 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h3><p>2016年没去几个城市，只有北京、陕西、广州、福州（出差一个月）。生活质量期待以后的提升，计划一些旅游什么的，为了目标努力吧！！！</p>
<h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><p>看书时间是不少的，非技术书籍寥寥无几，这方面是需要改善的地方，2017年开始计划着时间多读一下文学类的书籍陶冶身心。</p>
<h3 id="科技时代"><a href="#科技时代" class="headerlink" title="科技时代"></a>科技时代</h3><p>读大学那会儿，团购、O2O火起来；刚毕业那会团购死一大片、P2P网贷流行又迅速倒一片；今年流行是人工智能和VR，这应该是长久的，未来人类一直要做的努力，可以造福人类。互联网可能每隔5年会有一个颠覆性变化，从事it行业，平时工作学习编程以外，是需要多了解一下其他的东西，拓展自己的视野，前瞻性，提升自身价值的能力值和宽度。</p>
<h3 id="2017年愿景"><a href="#2017年愿景" class="headerlink" title="2017年愿景"></a>2017年愿景</h3><ul>
<li>多陪父母，多打电话</li>
<li>工作上期望有个好的技术氛围，多认识一些爱学习讨论的coder，更加努力，更快成长</li>
<li>开心的玩</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年底了，毕业两年半，也就是工作2年半了，times flying！！！&lt;/p&gt;
&lt;p&gt;2016年，变化比较大的有三方面：工作地点由北京换到广州、脱离单身dog、gis行业转互联网（勉强算，都是做编程开发）。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://blog.giscafer.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="总结" scheme="http://blog.giscafer.com/categories/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="日记" scheme="http://blog.giscafer.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>代码理解React组件生命周期过程</title>
    <link href="http://blog.giscafer.com/2016/12/15/react-component-lifecycle/"/>
    <id>http://blog.giscafer.com/2016/12/15/react-component-lifecycle/</id>
    <published>2016-12-14T16:30:30.000Z</published>
    <updated>2016-12-15T14:16:26.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>React Component整个生命周期分为三大块：<strong>初始化——存在期（更新）——销毁清理</strong></p>
<h3 id="首次实例化-调用方法"><a href="#首次实例化-调用方法" class="headerlink" title="首次实例化 调用方法"></a>首次实例化 调用方法</h3><ul>
<li>getDefaultProps()</li>
<li>getInitialState()</li>
<li>componentWillMount()</li>
<li>render()</li>
<li>componentDidMount()()</li>
</ul>
<p><em>ES6写法中则为</em></p>
<ul>
<li>constructor()</li>
<li>componentWillMount()</li>
<li>render()</li>
<li>componentDidMount()</li>
</ul>
<h3 id="存在期-调用方法"><a href="#存在期-调用方法" class="headerlink" title="存在期 调用方法"></a>存在期 调用方法</h3><p><strong> <code>props</code> 或 <code>state</code>状态改变</strong></p>
<ul>
<li>componentWillReceiveProps()</li>
<li>shouldComponentUpdate()</li>
<li>componentWillUpdate()</li>
<li>render()</li>
<li>componentDidUpdate()</li>
</ul>
<h3 id="销毁清理-调用方法"><a href="#销毁清理-调用方法" class="headerlink" title="销毁清理 调用方法"></a>销毁清理 调用方法</h3><ul>
<li>componentWillUnmount()</li>
</ul>
<a id="more"></a>
<h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>创建一个<code>LifeCycleComponent.js</code>组件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">    'use strict'</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> Nav <span class="keyword">from</span> <span class="string">'../nav/Nav'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LifeCycleComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props)&#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        fpLog(<span class="string">'初始化调用:constructor()'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//在完成首次渲染之前调用，此时仍可以修改组件的state</span></div><div class="line">    componentWillMount()&#123;</div><div class="line">        fpLog(<span class="string">'完成渲前调用:componentWillMount()'</span>)</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        fpLog(<span class="string">'渲染时调用:render()'</span>);</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">Nav</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.props.text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://facebook.github.io/react/docs/react-component.html"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Component Specs and Lifecycle<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">    shouldComponentUpdate(nextProps, nextState)&#123;</div><div class="line">        <span class="comment">//该方法用来做一下性能优化，默认是返回true，返回false则阻止render()调用，跳过后续的生命周期方法</span></div><div class="line">        <span class="comment">//在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用</span></div><div class="line">        fpLog(<span class="string">'当渲染新的props或state调用:shouldComponentUpdate()'</span>);</div><div class="line">        fpLog2(<span class="string">'&lt;span style="color:blue"&gt;原始props.text='</span>+<span class="keyword">this</span>.props.text+<span class="string">'&lt;/span&gt;'</span>);</div><div class="line">        fpLog2(<span class="string">'&lt;span style="color:red"&gt;改变后的props.text='</span>+nextProps.text+<span class="string">'&lt;/span&gt;'</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.props.info!==nextProps.text)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    componentWillUpdate()&#123;</div><div class="line">         <span class="comment">//该方法中不允许更新props或state，也就是更新也是无效的</span></div><div class="line">        fpLog(<span class="string">'接收到新的props或者state后，进行渲染之前调用:componentWillUpdate()'</span>);</div><div class="line">    &#125;</div><div class="line">    componentDidUpdate()&#123;</div><div class="line">        fpLog(<span class="string">'完成渲染新的props或者state后调用，此时可以访问到新的DOM元素:componentDidUpdate()'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//真实DOM渲染后调用</span></div><div class="line">    componentDidMount()&#123;</div><div class="line">        fpLog(<span class="string">'真实DOM渲染后调用:componentDidMount()'</span>)</div><div class="line">    &#125;</div><div class="line">    componentWillReceiveProps(nextProps)&#123;</div><div class="line">        fpLog(<span class="string">'组件接收到新的props时调用:componentWillReceiveProps()---'</span>+nextProps.text)</div><div class="line">    &#125;</div><div class="line">    componentWillUnmount()&#123;</div><div class="line">        fpLog(<span class="string">'组件销毁前调用：componentWillUnmount()'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">LifeCycleComponent.dispalyName=<span class="string">'LifeCycleComponentDemo'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> LifeCycleComponent;</div></pre></td></tr></table></figure>
<p><strong>父组件入口文件<code>Main.js</code></strong>，改组件主要用来动态改变<code>state</code>值后，观察<code>LifeCycleComponent</code>组件的生命周期方法的调用情况</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> LifeCycleApp <span class="keyword">from</span> <span class="string">'./LifeCycle'</span>;</div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LifeCycleMainComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            <span class="attr">info</span>: <span class="string">'The React Component Lifecycle'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">LifeCycleApp</span> <span class="attr">text</span>=<span class="string">&#123;this.state.info&#125;</span> /&gt;</span></span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">    componentDidMount() &#123;</div><div class="line">        //定时更新state的值</div><div class="line">        setTimeout(() =&gt; &#123;</div><div class="line">            this.setState(&#123;</div><div class="line">                info: 'React组件生命周期'</div><div class="line">            &#125;)</div><div class="line">        &#125;, 2000)</div><div class="line">        setTimeout(() =&gt; &#123;</div><div class="line">            this.setState(&#123;</div><div class="line">                info: '再次改变state值'</div><div class="line">            &#125;)</div><div class="line">        &#125;, 5000)</div><div class="line">    &#125;</div><div class="line">    componentWillUnmount() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LifeCycleMainComponent.defaultProps = &#123;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default LifeCycleMainComponent;</div></pre></td></tr></table></figure>
<p>最后输出日志为：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> 初始化调用<span class="symbol">:constructor</span>()</span></div><div class="line">-<span class="ruby"> 完成渲前调用<span class="symbol">:componentWillMount</span>()</span></div><div class="line">-<span class="ruby"> 渲染时调用<span class="symbol">:render</span>()</span></div><div class="line">-<span class="ruby"> 真实DOM渲染后调用<span class="symbol">:componentDidMount</span>()</span></div><div class="line">-<span class="ruby"> 组件接收到新的props时调用<span class="symbol">:componentWillReceiveProps</span>()---React组件生命周期</span></div><div class="line">-<span class="ruby"> 当渲染新的props或state调用<span class="symbol">:shouldComponentUpdate</span>()</span></div><div class="line">&gt;&gt;&gt; 原始props.text=The React Component Lifecycle</div><div class="line">&gt;&gt;&gt; 改变后的props.text=React组件生命周期</div><div class="line">-<span class="ruby"> 接收到新的props或者state后，进行渲染之前调用<span class="symbol">:componentWillUpdate</span>()</span></div><div class="line">-<span class="ruby"> 渲染时调用<span class="symbol">:render</span>()</span></div><div class="line">-<span class="ruby"> 完成渲染新的props或者state后调用，此时可以访问到新的DOM元素<span class="symbol">:componentDidUpdate</span>()</span></div><div class="line">-<span class="ruby"> 组件接收到新的props时调用<span class="symbol">:componentWillReceiveProps</span>()---再次改变state值</span></div><div class="line">-<span class="ruby"> 当渲染新的props或state调用<span class="symbol">:shouldComponentUpdate</span>()</span></div><div class="line">原始props.text=React组件生命周期</div><div class="line">改变后的props.text=再次改变state值</div><div class="line">-<span class="ruby"> 接收到新的props或者state后，进行渲染之前调用<span class="symbol">:componentWillUpdate</span>()</span></div><div class="line">-<span class="ruby"> 渲染时调用<span class="symbol">:render</span>()</span></div><div class="line">-<span class="ruby"> 完成渲染新的props或者state后调用，此时可以访问到新的DOM元素<span class="symbol">:componentDidUpdate</span>()</span></div></pre></td></tr></table></figure>
<p>结果截图：</p>
<p><img src="https://raw.githubusercontent.com/giscafer/react-demo-list/master/src/images/lifecycle.png" alt="React Component lifeCycle"></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/giscafer/react-demo-list" target="_blank" rel="external">https://github.com/giscafer/react-demo-list</a></p>
<p>[参考链接]</p>
<ul>
<li><a href="https://facebook.github.io/react/docs/react-component.html" target="_blank" rel="external">React.Component</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;headerlink&quot; title=&quot;生命周期&quot;&gt;&lt;/a&gt;生命周期&lt;/h2&gt;&lt;p&gt;React Component整个生命周期分为三大块：&lt;strong&gt;初始化——存在期（更新）——销毁清理&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;首次实例化-调用方法&quot;&gt;&lt;a href=&quot;#首次实例化-调用方法&quot; class=&quot;headerlink&quot; title=&quot;首次实例化 调用方法&quot;&gt;&lt;/a&gt;首次实例化 调用方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;getDefaultProps()&lt;/li&gt;
&lt;li&gt;getInitialState()&lt;/li&gt;
&lt;li&gt;componentWillMount()&lt;/li&gt;
&lt;li&gt;render()&lt;/li&gt;
&lt;li&gt;componentDidMount()()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;ES6写法中则为&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;constructor()&lt;/li&gt;
&lt;li&gt;componentWillMount()&lt;/li&gt;
&lt;li&gt;render()&lt;/li&gt;
&lt;li&gt;componentDidMount()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;存在期-调用方法&quot;&gt;&lt;a href=&quot;#存在期-调用方法&quot; class=&quot;headerlink&quot; title=&quot;存在期 调用方法&quot;&gt;&lt;/a&gt;存在期 调用方法&lt;/h3&gt;&lt;p&gt;&lt;strong&gt; &lt;code&gt;props&lt;/code&gt; 或 &lt;code&gt;state&lt;/code&gt;状态改变&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;componentWillReceiveProps()&lt;/li&gt;
&lt;li&gt;shouldComponentUpdate()&lt;/li&gt;
&lt;li&gt;componentWillUpdate()&lt;/li&gt;
&lt;li&gt;render()&lt;/li&gt;
&lt;li&gt;componentDidUpdate()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;销毁清理-调用方法&quot;&gt;&lt;a href=&quot;#销毁清理-调用方法&quot; class=&quot;headerlink&quot; title=&quot;销毁清理 调用方法&quot;&gt;&lt;/a&gt;销毁清理 调用方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;componentWillUnmount()&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="React" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/React/"/>
    
    
      <category term="React组件" scheme="http://blog.giscafer.com/tags/React%E7%BB%84%E4%BB%B6/"/>
    
      <category term="React组件生命周期" scheme="http://blog.giscafer.com/tags/React%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-cafe</title>
    <link href="http://blog.giscafer.com/2016/12/11/hexo-theme-cafe/"/>
    <id>http://blog.giscafer.com/2016/12/11/hexo-theme-cafe/</id>
    <published>2016-12-11T03:40:35.000Z</published>
    <updated>2017-03-05T13:59:52.032Z</updated>
    
    <content type="html"><![CDATA[<p>尝试自己定制一个Hexo博客主题<code>Cafe</code>，Cafe 主题旨在追求简约、操作简单、阅读舒适度，详细介绍和源码见<a href="https://github.com/giscafer/hexo-theme-cafe" target="_blank" rel="external">https://github.com/giscafer/hexo-theme-cafe</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尝试自己定制一个Hexo博客主题&lt;code&gt;Cafe&lt;/code&gt;，Cafe 主题旨在追求简约、操作简单、阅读舒适度，详细介绍和源码见&lt;a href=&quot;https://github.com/giscafer/hexo-theme-cafe&quot; target=&quot;_blank&quot; 
    
    </summary>
    
      <category term="技术" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="项目&amp;Demo" scheme="http://blog.giscafer.com/categories/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE-Demo/"/>
    
    
      <category term="cafe" scheme="http://blog.giscafer.com/tags/cafe/"/>
    
      <category term="项目" scheme="http://blog.giscafer.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Hexo" scheme="http://blog.giscafer.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
